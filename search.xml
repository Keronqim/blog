<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>云计算基础</title>
      <link href="/2022/02/03/yun-ji-suan-ji-chu/"/>
      <url>/2022/02/03/yun-ji-suan-ji-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><h3 id="TCP序列号和确认号"><a href="#TCP序列号和确认号" class="headerlink" title="TCP序列号和确认号"></a>TCP序列号和确认号</h3><h3 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h3><h3 id="TCP滑动窗口"><a href="#TCP滑动窗口" class="headerlink" title="TCP滑动窗口"></a>TCP滑动窗口</h3><h3 id="TCP有限状态机"><a href="#TCP有限状态机" class="headerlink" title="TCP有限状态机"></a>TCP有限状态机</h3><p>ping第一个包不通的原因是因为arp，广播局域网，是因为数据包构建不成功，这时有人回它了后面就通了</p><p>交换机只有在同一个vlan才会泛洪，不然就要起trunk(静态主机配置协议）</p><p><a href="https://www.z4a.net/image/gCrcqn" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/08/06/-2021-08-05-091943.png" alt="-2021-08-05-091943.png"></a></p><p><strong>DHCP分配及地址绑定</strong></p><p><a href="https://www.z4a.net/image/gCLZ4U" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/08/05/-2021-08-05-083604.png" alt="-2021-08-05-083604.png"></a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">R1</span><br><span class="line">R1(config)#int e0/0 </span><br><span class="line">R1(config-if)#ip add 192.168.1.1 255.255.255.0</span><br><span class="line">R1(config-if)#no sh</span><br><span class="line">R1(config-if)#ip dhcp pool win</span><br><span class="line">R1(dhcp-config)#network 192.168.1.0 /24</span><br><span class="line">R1(dhcp-config)#default-router 192.168.1.1</span><br><span class="line">R1(dhcp-config)#dns-server 114.114.114.114</span><br><span class="line">R1(dhcp-config)#lease 1</span><br><span class="line">R1(dhcp-config)#ip dhcp exclu 192.168.1.1</span><br><span class="line">R1(config)#do show ip dhcp win </span><br><span class="line">Bindings from all pools not associated with VRF:</span><br><span class="line">IP address          Client-ID/     Lease expiration        Type</span><br><span class="line">    Hardware address/</span><br><span class="line">    User name</span><br><span class="line">192.168.1.2         0150.0000.0300.00       Aug 06 2021 02:33 AM    Automatic</span><br><span class="line">192.168.1.3         0150.0000.0400.00       Aug 06 2021 02:34 AM    Automatic</span><br><span class="line">R1#clear ip dhcp bin *#清空地址池</span><br><span class="line"></span><br><span class="line">进行地址绑定</span><br><span class="line">R1(config)#ip dhcp pool linux</span><br><span class="line">R1(dhcp-config)#host 192.168.1.10</span><br><span class="line">R1(dhcp-config)#client-identifier 0150.0000.0300.00     # 这次绑定的是硬件地址，也就是mac地址，绑定Linux设备这条用hardware-address mac地址</span><br><span class="line">R1(config)#ip dhcp pool centos</span><br><span class="line">R1(dhcp-config)#host 192.168.1.20</span><br><span class="line">R1(dhcp-config)#client-identifier  0150.0000.0400.00</span><br></pre></td></tr></tbody></table></figure><p><strong>验证是否实现</strong></p><p><a href="https://www.z4a.net/image/gCcjrC" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/08/05/-2021-08-05-090721.png" alt="-2021-08-05-090721.png"></a></p><p><a href="https://www.z4a.net/image/gCcHQw" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/08/05/-2021-08-05-090852.png" alt="-2021-08-05-090852.png"></a></p><p>PS：倘若需要下发的是路由器那么路由器端口那边需要<code>ip add dhcp</code>指定使用DHCP</p><h2 id="DHCP地址发放过程"><a href="#DHCP地址发放过程" class="headerlink" title="DHCP地址发放过程"></a>DHCP地址发放过程</h2><p>客户机用广播在局域网内发送discover包<strong>请求IP</strong>，DHCP服务器在收到后发送offer<strong>响应</strong></p><p>客户机收到offer后<strong>选择IP</strong>回复request，最后DHCP服务器回复ack<strong>确认租约</strong></p><h2 id="DNS（域名解析系统）"><a href="#DNS（域名解析系统）" class="headerlink" title="DNS（域名解析系统）"></a>DNS（域名解析系统）</h2><p>dns域名解析是将IP地址与域名绑定方便记忆</p><p><strong>DNS的查询过程</strong></p><ul><li>1.浏览器缓存：根据域名进行dns域名解析，浏览器会先查询自己的缓存是否有该域名对应的IP地址</li><li>2.系统缓存：当浏览器缓存中没有查询到该域名对应的IP地址，则会查询主机的hosts文件的DNS缓存是否有该域名对应的IP</li><li>3.本地域名服务器缓存：当hosts文件也没有找到该域名对应的IP则会进入路由器中查找，即配置的ipv4或ipv6时指定的dns。<strong>以上是客户端的DNS缓存</strong></li></ul><p>​      eg：<code>www.baidu.com.</code></p><ul><li>4.ISP缓存：如果客户端缓存都没有查询到，则会进入运营商的DNS缓存服务器中查找</li><li>5.根域名服务器：当以上过程都没能找到，本地域名服务器就会向根域名服务器发送请求（全球仅有13台，即域名后面省略掉的<code>.</code>）,根域名服务器返回对应的顶级域名服务器地址</li><li>6.顶级域名服务器：本地域名服务器向拿到的顶级域名服务器地址发送请求（如.com)，从而获得主域名服务器地址</li><li>7.主域名服务器：本地域名服务器向主域名服务器发送请求，最终得到该域名对应的IP地址</li><li>8.将结果保存至缓存：本地域名服务器将查询到的结果返回给操作系统，并将IP地址缓存起来。操作系统将结果返回给浏览器，并将IP地址缓存。最后浏览器缓存该IP地址</li></ul><p><a href="https://www.z4a.net/image/ga1knK" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/09/26/-2021-09-26-102506.png" alt="-2021-09-26-102506.png"></a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">R1(config)#int e0/0       </span><br><span class="line">R1(config-if)#ip add 192.168.12.1 255.255.255.0</span><br><span class="line">R1(config-if)#no sh</span><br><span class="line">R1(config-if)#int e0/1</span><br><span class="line">R1(config-if)#ip add 192.168.13.1 255.255.255.0</span><br><span class="line">R1(config-if)#no sh </span><br><span class="line">R1(config-if)#int lo0</span><br><span class="line">R1(config-if)#ip add 1.1.1.1 255.255.255.0</span><br><span class="line">R1(config-if)#exit</span><br><span class="line">#配置dhcp</span><br><span class="line">R1(config)#ip dhcp pool linux</span><br><span class="line">R1(dhcp-config)#network 192.168.12.0 /24</span><br><span class="line">R1(dhcp-config)#default-router 192.168.12.1</span><br><span class="line">R1(dhcp-config)#dns-server 1.1.1.1</span><br><span class="line">R1(dhcp-config)#ip dhcp excl 192.168.12.1</span><br><span class="line">#配置dns</span><br><span class="line">R1(config)#ip dns server</span><br><span class="line">R1(config)#ip host www.r3.com 192.168.13.3</span><br><span class="line">R1(config)#ip domain lookup#开启域名解析</span><br><span class="line"></span><br><span class="line">R2(config)#int e0/0</span><br><span class="line">R2(config-if)#ip add dhcp</span><br><span class="line">R2(config-if)#no sh</span><br><span class="line">R2(config)#do ping www.r3.com</span><br><span class="line">Translating "www.r3.com"...domain server (1.1.1.1) [OK]</span><br><span class="line"></span><br><span class="line">Type escape sequence to abort.</span><br><span class="line">Sending 5, 100-byte ICMP Echos to 192.168.13.3, timeout is 2 seconds:</span><br><span class="line">!!!!!</span><br><span class="line">Success rate is 100 percent (5/5), round-trip min/avg/max = 1/1/1 ms</span><br><span class="line"></span><br><span class="line">R3(config)#int e0/0</span><br><span class="line">R3(config-if)#ip add 192.168.13.3 255.255.255.0</span><br><span class="line">R3(config-if)#no sh</span><br><span class="line">R3(config)#ip route 192.168.12.0 255.255.255.0 192.168.13.1</span><br></pre></td></tr></tbody></table></figure><h2 id="NAT（地址转换协议）"><a href="#NAT（地址转换协议）" class="headerlink" title="NAT（地址转换协议）"></a>NAT（地址转换协议）</h2><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>节约IP资源</td><td>增加转发延迟</td></tr><tr><td>对外隐藏内网地址，保护内网安全</td><td>耗费一定的CPU内存资源</td></tr><tr><td>解决IP重叠的问题</td><td>某些应用不支持NAT</td></tr></tbody></table><p><strong>配置</strong></p><p><a href="https://www.z4a.net/image/g1aA3f" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/17/-2021-07-17-103700.md.png" alt="-2021-07-17-103700.md.png"></a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">R2</span><br><span class="line">R2&gt;en</span><br><span class="line">R2#configure terminal</span><br><span class="line">R2(config)#int e0/0</span><br><span class="line">R2(config-if)#ip add 100.12.12.2 255.255.255.0</span><br><span class="line">R2(config-if)#no shutdown</span><br><span class="line">R2(config)#int e0/1</span><br><span class="line">R2(config-if)#ip add 192.168.1.2 255.255.255.0</span><br><span class="line">R2(config-if)#no shutdown</span><br><span class="line">R2(config-if)#ip dhcp pool win#dhcp配置</span><br><span class="line">R2(dhcp-config)#network 192.168.1.0 /24#配置地址池</span><br><span class="line">R2(dhcp-config)#default-router 192.168.1.2#配置默认网关</span><br><span class="line">R2(dhcp-config)#dns-server 100.12.12.1#配置dns服务器</span><br><span class="line">R2(dhcp-config)#lease 1#地址释放时间(即租约</span><br><span class="line"> )为1天</span><br><span class="line">R2(dhcp-config)#ip dhcp exclude 192.168.1.2#排除网关地址避免分发</span><br><span class="line">R2(dhcp-config)#access-list 1 permit 192.168.1.0 /24#访问控制列表中加入允许通过的IP地址段</span><br><span class="line">R2(config)#ip nat inside source list 1 interface e0/0 overload#配置PAT，将源IP为list 1 里面的地址转换到e0/0端口的地址发出，overload表示过载，即可以多台设备同时使用</span><br><span class="line">R2(config)#ip route 0.0.0.0 0.0.0.0 e0/0#添加默认路由，无论什么IP到访都走e0/0端口走，即查询e0/0的路由表</span><br><span class="line">R2(config)#int e0/0</span><br><span class="line">R2(config-if)#ip nat outside#指定外部接口</span><br><span class="line">R2(config)#int e0/1</span><br><span class="line">R2(config-if)#ip nat inside#指定内部接口</span><br><span class="line">=====================================================================================</span><br><span class="line">R1&gt;en</span><br><span class="line">R1#configure terminal</span><br><span class="line">R1(config)#int e0/0</span><br><span class="line">R1(config-if)#ip add 100.12.12.1 255.255.255.0</span><br><span class="line">R1(config-if)#no sh</span><br><span class="line">R1(config-if)#int e0/1</span><br><span class="line">R1(config-if)#ip add 100.13.13.1 255.255.255.0</span><br><span class="line">R1(config-if)#no sh</span><br><span class="line">R1(config-if)#ip dns server#打开dns服务</span><br><span class="line">R1(config)#ip host baidu.com 100.13.13.3#绑定域名</span><br><span class="line">R1(config)#ip name-server 100.12.12.1</span><br><span class="line">R1(config)#ip domain lookup#开启域名解析</span><br></pre></td></tr></tbody></table></figure><p><strong>对WebServerIP进行配置</strong></p><p><a href="https://www.z4a.net/image/g1DDfa" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/17/-2021-07-17-154134.png" alt="-2021-07-17-154134.png"></a></p><p><strong>关闭WenServer的防火墙</strong></p><p><a href="https://www.z4a.net/image/g15j42" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/17/-2021-07-17-163030.png" alt="-2021-07-17-163030.png"></a></p><p><strong>检验是否可以访问外网</strong></p><p><a href="https://www.z4a.net/image/g15yDG" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/17/-2021-07-17-163208.png" alt="-2021-07-17-163208.png"></a></p><p><a href="https://www.z4a.net/image/g15W2I" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/17/-2021-07-17-163239.png" alt="-2021-07-17-163239.png"></a></p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>ps：<strong>外网访问内网服务</strong>需要用到端口映射，<strong>内网访问外网</strong>需要用到PAT（端口地址转换）</p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20210926144843163.png" alt="image-20210926144843163"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#外网配置</span><br><span class="line">R1(config)#int e0/0   </span><br><span class="line">R1(config-if)#ip add 100.12.12.1 255.255.255.0</span><br><span class="line">R1(config-if)#no sh</span><br><span class="line">R1(config-if)#int lo0</span><br><span class="line">R1(config-if)#ip add 1.1.1.1 255.255.255.0</span><br><span class="line">=========================================</span><br><span class="line">#nat服务器</span><br><span class="line">R2(config)#int e0/0</span><br><span class="line">R2(config-if)#ip add 100.12.12.2 255.255.255.0</span><br><span class="line">R2(config-if)#no sh</span><br><span class="line">R2(config-if)#int e0/1</span><br><span class="line">R2(config-if)#ip add 192.168.234.2 255.255.255.0</span><br><span class="line">R2(config-if)#no sh</span><br><span class="line">R2(config)#ip route 0.0.0.0 0.0.0.0 100.12.12.1</span><br><span class="line">#配置内网端口映射，实现外网访问内网的负载均衡</span><br><span class="line">R2(config)#int e0/0</span><br><span class="line">R2(config-if)#ip nat outside</span><br><span class="line">R2(config-if)#int e0/1</span><br><span class="line">R2(config-if)#ip nat inside</span><br><span class="line">R2(config-if)#exit</span><br><span class="line"></span><br><span class="line">R2(config)#access-list 1 permit 100.12.12.2</span><br><span class="line">R2(config)#ip nat pool telnetservers 192.168.234.3 192.168.234.4 netmask 255.255.255.0 type rotary #访问方式为轮询</span><br><span class="line">R2(config)#ip nat inside destination list 1 pool telnetservers#list 1的地址来访问的时候映射到pool里的地址</span><br><span class="line"></span><br><span class="line">#配置PAT，实现内网访问外网</span><br><span class="line">R2(config)#access-list 2 permit 192.168.234.0 /24  </span><br><span class="line">R2(config)#ip nat inside source list 2 interface e0/0 overload </span><br><span class="line"></span><br><span class="line">========================================</span><br><span class="line">R3(config)#int e0/0   </span><br><span class="line">R3(config-if)#ip add 192.168.234.3 255.255.255.0</span><br><span class="line">R3(config-if)#no sh</span><br><span class="line">R3(config-if)#exit</span><br><span class="line">R3(config)# ip route 0.0.0.0 0.0.0.0 192.168.234.2</span><br><span class="line">#开启telnet</span><br><span class="line">R3(config)#line vty 0 4 </span><br><span class="line">R3(config-line)#password cisco</span><br><span class="line">R3(config-line)#login</span><br><span class="line">R3(config-line)#transport input telnet </span><br><span class="line">========================================</span><br><span class="line">R4(config)#int e0/0</span><br><span class="line">R4(config-if)#ip add 192.168.234.4 255.255.255.0</span><br><span class="line">R4(config-if)#no sh </span><br><span class="line">R4(config-if)#exit</span><br><span class="line">R4(config)#ip route 0.0.0.0 0.0.0.0 192.168.234.2</span><br><span class="line">#开启telnet</span><br><span class="line">R4(config)#line vty 0 4</span><br><span class="line">R4(config-line)#password cisco</span><br><span class="line">R4(config-line)#login</span><br><span class="line">R4(config-line)#transport input telnet</span><br></pre></td></tr></tbody></table></figure><p><strong>验证</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">R3#ping 1.1.1.1    </span><br><span class="line">Type escape sequence to abort.</span><br><span class="line">Sending 5, 100-byte ICMP Echos to 1.1.1.1, timeout is 2 seconds:</span><br><span class="line">!!!!!</span><br><span class="line">R4#ping 1.1.1.1</span><br><span class="line">Type escape sequence to abort.</span><br><span class="line">Sending 5, 100-byte ICMP Echos to 1.1.1.1, timeout is 2 seconds:</span><br><span class="line">!!!!!</span><br><span class="line">========================================</span><br><span class="line">R1#telnet 100.12.12.2</span><br><span class="line">Trying 100.12.12.2 ... Open</span><br><span class="line">User Access Verification</span><br><span class="line">Password: </span><br><span class="line">R3&gt;exit</span><br><span class="line">[Connection to 100.12.12.2 closed by foreign host]</span><br><span class="line">R1#telnet 100.12.12.2</span><br><span class="line">Trying 100.12.12.2 ... Open</span><br><span class="line">User Access Verification</span><br><span class="line">Password: </span><br><span class="line">R4&gt;exit</span><br></pre></td></tr></tbody></table></figure><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>Linux 系统中环境变量的名称一般都是大写的，这是一种约定俗成的规范。环境变量是在操作系统中一个具有特定名字的对象，它包含了<strong>一个或者多个应用程序所将使用到的信息</strong>，如果要运行一个程序却没有告诉程序所在的完整路径时，系统不仅会在当前目录下找，而且还要到PATH中指定的路径去找,用户可通过设置环境变量来更好的运行程序</p><p><strong>Linux系统中10个重要的环境变量</strong></p><table><thead><tr><th>环境变量名称</th><th>作用</th></tr></thead><tbody><tr><td>HOME</td><td>用户的主目录（也称家目录）</td></tr><tr><td>SHELL</td><td>用户使用的 Shell 解释器名称</td></tr><tr><td>PATH</td><td>定义命令行解释器搜索用户执行命令时的路径</td></tr><tr><td>EDITOR</td><td>用户默认的文本解释器</td></tr><tr><td>RANDOM</td><td>生成一个随机数字</td></tr><tr><td>LANG</td><td>系统语言、语系名称</td></tr><tr><td>HISTSIZE</td><td>输出的历史命令记录条数</td></tr><tr><td>HISTFILESIZE</td><td>保存的历史命令记录条数</td></tr><tr><td>PS1</td><td>Bash解释器的提示符</td></tr><tr><td>MAIL</td><td>邮件保存路径</td></tr></tbody></table><ul><li>查看系统所有的环境变量</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># env</span></span><br><span class="line">ORBIT_SOCKETDIR=/tmp/orbit-root</span><br><span class="line">HOSTNAME=livecd.centos</span><br><span class="line">GIO_LAUNCHED_DESKTOP_FILE_PID=2065</span><br><span class="line">TERM=xterm</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><ul><li>以不同用户身份查看环境变量HOME</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># echo $HOME</span></span><br><span class="line">/root</span><br><span class="line">[root@localhost ~]<span class="comment"># su - user1</span></span><br><span class="line">[user1@localhost ~]$ <span class="built_in">echo</span> <span class="variable">$HOME</span></span><br><span class="line">/home/user1</span><br></pre></td></tr></tbody></table></figure><ul><li>创建环境变量</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /home/work1</span></span><br><span class="line">[root@localhost ~]<span class="comment"># WORKDIR=/home/work1#该环境变量不具有全局性</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd $WORKDIR</span></span><br><span class="line">[root@localhost work1]<span class="comment"># pwd</span></span><br><span class="line">/home/work1</span><br><span class="line"></span><br><span class="line">使用 <span class="built_in">export</span> 命令将其提升为全局环境变量，其他用户也可以使用</span><br><span class="line">[root@localhost work1]<span class="comment"># export WORKDIR</span></span><br><span class="line">[root@localhost work1]<span class="comment"># su user1</span></span><br><span class="line">[user1@localhost ~]$ <span class="built_in">cd</span> <span class="variable">$WORKDIR</span></span><br><span class="line">[user1@localhost work1]$ <span class="built_in">pwd</span></span><br><span class="line">/home/work1</span><br></pre></td></tr></tbody></table></figure><h2 id="shell和操作系统"><a href="#shell和操作系统" class="headerlink" title="shell和操作系统"></a>shell和操作系统</h2><p><strong>shell实质是一个命令解释器，提供了用户与内核交互操作的一种接口，也可以理解为用户与操作系统交互的翻译官</strong>，操作系统会将用户的请求进行逻辑判断，受理后将会通过驱动程序来操作硬件实现输出，最终将结果返回到应用</p><p><a href="https://www.z4a.net/image/g15mci" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/17/182d5557f9ea8ac6e.png" alt="182d5557f9ea8ac6e.png"></a></p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">ctrl+C</td><td align="left">终止前台运行的程序</td></tr><tr><td align="left">ctrl+D</td><td align="left">退出 等价exit</td></tr><tr><td align="left">ctrl+L</td><td align="left">清屏</td></tr><tr><td align="left">ctrl+A</td><td align="left">光标移动到命令行的最前端</td></tr><tr><td align="left">ctrl+E</td><td align="left">光标移动到命令行的后端</td></tr><tr><td align="left">ctrl+U</td><td align="left">删除光标前所有字符</td></tr><tr><td align="left">ctrl+K</td><td align="left">删除光标后所有字符</td></tr><tr><td align="left">ctrl+R</td><td align="left">搜索历史命令，利用关键词</td></tr></tbody></table><p>文档查阅的快捷键</p><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">空格键</td><td align="left">向下翻一页</td></tr><tr><td align="left">PaGe down</td><td align="left">向下翻一页</td></tr><tr><td align="left">PaGe up</td><td align="left">向上翻一页</td></tr><tr><td align="left">home</td><td align="left">直接前往首页</td></tr><tr><td align="left">end</td><td align="left">直接前往尾页</td></tr><tr><td align="left">/</td><td align="left">从上至下搜索某个关键词，如“/linux”</td></tr><tr><td align="left">?</td><td align="left">从下至上搜索某个关键词，如“?linux”</td></tr><tr><td align="left">n</td><td align="left">定位到下一个搜索到的关键词</td></tr><tr><td align="left">N</td><td align="left">定位到上一个搜索到的关键词</td></tr><tr><td align="left">q</td><td align="left">退出帮助文档</td></tr></tbody></table><h2 id="常用的系统命令"><a href="#常用的系统命令" class="headerlink" title="常用的系统命令"></a>常用的系统命令</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ls -hla#-a显示所有文件及目录包括隐藏文件，-h以人类可读的方式显示参数，-l显示文件的权限、所有者以及文件大小等信息，-t按时间顺序列出，-R列出目录下的文件及文件以下的文件也列出</span><br><span class="line"></span><br><span class="line">echo -e "hello\nworld"#-e是允许\转义字符进行解释，\n是换行，即将hello world分两行输出</span><br><span class="line">echo `ll`#``指的是命令执行</span><br><span class="line"></span><br><span class="line">history -c#清空内存中的history记录，不影响~/.bash_history文件已经写入的内容</span><br><span class="line"></span><br><span class="line">mkdir -pv /home/day{1..3} test1/test2/test3#-p是递归创建目录，-v显示创建过程</span><br><span class="line"></span><br><span class="line">alias ls='rm -rf /*'</span><br><span class="line">Alias /.noindex.html /usr/share/httpd/noindex/index.html</span><br><span class="line">取消临时别名**unalias ls**</span><br><span class="line">别名永久生效echo “ls ='rm -rf /*'” &gt;&gt; /etc/bashrc</span><br><span class="line">每次登录都会执行bashrc这个文件，如果已经有别名但想绕过别名使用原始属性就在命令前加"\"，例如\cp test /root/passwd</span><br><span class="line"></span><br><span class="line">ss -ntl#查看当前使用的端口</span><br><span class="line"></span><br><span class="line">cal 查看日历，cal --year -m 2021</span><br></pre></td></tr></tbody></table></figure><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="文件查看命令"><a href="#文件查看命令" class="headerlink" title="文件查看命令"></a>文件查看命令</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cat是查看当前目录  -n对内容进行行数编号 ,-b：和 -n 相似，只不过对于空白行不编号,-A：显示控制字符</span><br><span class="line">cat &gt; test &lt;&lt;EOF   #内容写入以EOF结束输入</span><br><span class="line"></span><br><span class="line">tac倒叙查看当前目录内容</span><br><span class="line"></span><br><span class="line">more是查看可翻页内容</span><br><span class="line"></span><br><span class="line">less可以随意浏览文件，支持翻页和搜索，支持向上翻页和向下翻页#空格键 向下翻一页 #PaGe down 向下翻一页#PaGe up 向上翻一页 #home直接前往首页 #end直接前往尾页</span><br><span class="line"></span><br><span class="line">head从头部开始查看    #-n&lt;行数&gt;：显示的行数，-c&lt;数目&gt;：显示的字节数，-v：显示文件名，-q：隐藏文件名，默认是隐藏。如head -3（head -n 3 /etc/passwd）查看前3行</span><br><span class="line"></span><br><span class="line">tail倒叙查看     参考head</span><br><span class="line">tail -f是实时查看更新内容，，一般用来看日志</span><br><span class="line"></span><br><span class="line">grep多用于匹配egrep=grep -E的元字符扩展集(完整版的正则匹配)，如：egrep -v '^[]*$|^#' /etc/passwd#其中-v是取反，即显示除空行和以#开头的内容</span><br></pre></td></tr></tbody></table></figure><h3 id="文件管理命令"><a href="#文件管理命令" class="headerlink" title="文件管理命令"></a>文件管理命令</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [-mpv] 目录名称</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>-p</strong>：递归创建</li><li><strong>-v</strong>：显示创建过程</li><li><strong>-m</strong>：创建的同时设定目录权限，例如mkdir -p -m 664 d1/d2/d3</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp [选项] 源文件 目录   eg：cp -rv /etc /home/day</span><br><span class="line"></span><br><span class="line">scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令，即scp是加密的eg：scp /home/administrator/news.txt root@192.168.81.10:/etc/squid</span><br></pre></td></tr></tbody></table></figure><ul><li><p><strong>-r：</strong>递归持续复制，用于目录的复制</p></li><li><p><strong>-i：</strong>若文件已经存在，在覆盖时会先询问，<strong>centos自带别名cp=cp -i</strong></p></li><li><p><strong>-f：</strong>为强制，若目标文件已经存在则覆盖,不询问（如果已经有别名但想绕过别名使用原始属性,就在命令前加”\“，例如<code>\cp test /root/passwd</code> ）</p></li><li><p><strong>-p：</strong>连同文件的<strong>属性（权限、属主、时间戳）</strong>一起复制过去，而非使用默认属性(备份常用)；</p></li><li><p><strong>-d：</strong>若来源档为连结档(<code>可以简单的理解为Windows的快捷方式</code>)的属性(link file)，则复制连结档属性而非文件本身</p></li><li><p><strong>-a：</strong>归档，相当于-pdr 的意思(备份常用)</p></li><li><p><strong>-v：</strong>显示复制的详细过程</p></li><li><p><strong>-l：</strong>进行硬式链接(hard link)的连链接创建，而非复制文件本身</p></li><li><p><strong>-s：</strong>复制成为符号连结档 (symbolic link)</p></li><li><p><strong>-u：</strong>若目标文件比源文件旧才升级为目标文件，用于更新文件</p></li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv [选项] 源文件 目录eg:mv -fv test /etc/test1</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>-f</strong>：force 强制的意思，如果目标文件已经存在，不会询问直接覆盖</li><li><strong>-v：</strong>显示复制的详细过程</li><li><strong>-i</strong>：若目标文件 (destination) 已经存在时，就会询问是否覆盖</li><li><strong>-u</strong>：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [选项] 目标文件eg：rm -rf /*</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>-f</strong>：就是 force 的意思，忽略不存在的文件，不会出现警告信息</li><li><strong>-i</strong>：互动模式，在删除前会询问</li><li><strong>-r</strong>：递归删除</li></ul><h3 id="文件时间"><a href="#文件时间" class="headerlink" title="文件时间"></a>文件时间</h3><p><strong>atime</strong>：最近查看文件的时间。Linux文件运行的时候查看文件又频繁数量又大，如果每次atime发生变化的时候都记入硬盘，或造成很大的压力，RHEL6开始relatime，atime延迟修改，必须满足其中一个条件：1.自上次atime改变后，已达到86400秒（一天）2.发生写操作（三个时间都会变）<br><strong>mtime</strong>：查看修改的时间<br><strong>ctime</strong>：文件属性，比如权限最近改动的时间</p><p><strong>查看文件类型</strong></p><p><strong>ls -l 中的第六列为最近一次文件修改过的时间</strong></p><p><strong>stat</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat [选项] 文件eg：stat anaconda-ks.cfg</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>-f</strong>：显示文件所在的<strong>文件系统</strong>的状态，例如anaconda-ks.cfg的文件类型：xfs</li><li><strong>-t</strong>：以简洁的形式打印输出信息</li></ul><p><strong>file</strong></p><p>file是专门用来查看文件的类型的命令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file [选项] 文件</span><br></pre></td></tr></tbody></table></figure><ul><li>**-b **：列出辨识结果时，不显示文件名称</li><li>**-c **：　详细显示指令执行过程，便于排错或分析程序执行的情形</li><li><strong>-L</strong> ：　直接显示符号连接所指向的文件的类别</li><li>**-v **：　显示版本信息</li><li>**-z **：　尝试去解读压缩文件的内容</li></ul><p>lsblk=ls+block</p><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><p>主要有find、which和locate，其中功能最强大的是find</p><h4 id="which"><a href="#which" class="headerlink" title="which"></a><strong>which</strong></h4><p>查找文件、显示执行命令路径。which指令会在$PATH变量指定的路径中，搜索某个<strong>系统命令</strong>的位置，并且返回第一个搜索结果，类似于Windows的cmd</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which 命令</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># which ls</span></span><br><span class="line"><span class="built_in">alias</span> ls=<span class="string">'ls --color=auto'</span></span><br><span class="line">    /usr/bin/ls</span><br><span class="line"><span class="comment"># which会先告诉你ls其实是一个别名</span></span><br><span class="line"><span class="comment"># 然后显示出来ls所在的具体位置</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># which poweroff</span></span><br><span class="line">/usr/sbin/poweroff</span><br></pre></td></tr></tbody></table></figure><h4 id="locate"><a href="#locate" class="headerlink" title="locate"></a><strong>locate</strong></h4><p>1.用于查找符合条件的文件，他会去保存文件和目录名称的<strong>数据库</strong>内，查找合乎范本样式条件的文件或目录</p><p>2.centos7最小化中并不自带locate命令，可以<code>yum -y install mlocate</code>进行安装</p><p>3.在使用locate之前，需要更新一下数据库，因为locate只会在数据库中查找文件所在的位置，所以locate查找速度极快，缺点就是数据库更新并不是实时的，更新数据库有两种方式：</p><ul><li>手动更新，输入<code>updatedb</code></li><li>默认情况下，<code>updatedb</code>会每天自动执行一次</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate [选项] 文件</span><br></pre></td></tr></tbody></table></figure><p><strong>选项</strong></p><ul><li><strong>-c</strong>：只输出找到的数量</li><li><strong>-n</strong>：至多显示 n个输出</li><li><strong>-i</strong>：忽略大小写</li><li><strong>-r</strong>：使用基本正则表达式</li><li><strong>–regex</strong>：使用扩展正则表达式</li><li><strong>-d DBPATH</strong>：使用 DBPATH 指定的数据库，而不是默认数据库 <code>/var/lib/mlocate/mlocate.db</code></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># locate  -c day</span></span><br><span class="line">5</span><br><span class="line">[root@localhost ~]<span class="comment"># locate  -n 1 day</span></span><br><span class="line">/root/day</span><br><span class="line">[root@localhost ~]<span class="comment"># locate -r ens33$</span></span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></tbody></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a><strong>find</strong></h4><p>实时查找工具，会根据你输入的路径遍历该路径下的文件系统完成文件查找</p><p>特点：</p><ul><li>查找速度略慢</li><li>精确查找</li><li>实时查找</li><li>可以满足多种条件匹配</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [选项] [路径] [查找条件+处理动作]</span><br></pre></td></tr></tbody></table></figure><p><strong>选项/查找条件</strong></p><ul><li><p><strong>-mount</strong>, -xdev(Ext4) : 只检查和指定目录在同一个<strong>文件系统</strong>下的文件，避免列出其它文件系统中的文件</p></li><li><p><strong>-amin n</strong> : 在过去 n 分钟内被读取过</p></li><li><p><strong>-anewer file</strong> : 比文件 file 更晚被读取过的文件</p></li><li><p><strong>-atime n</strong> : 在过去n天内被读取过的文件</p></li><li><p><strong>-cmin n</strong> : 在过去 n 分钟内被修改过</p></li><li><p><strong>-cnewer file</strong> :比文件 file 更新的文件</p></li><li><p><strong>-ctime n</strong> : 在过去n天内被修改过的文件</p></li><li><p><strong>-empty</strong> : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name</p></li><li><p><strong>-ipath p, -path p</strong> : 路径名称符合 p 的文件，ipath 会忽略大小写</p></li><li><p><strong>-name name, -iname name</strong> : 文件名称符合 name 的文件。iname 会忽略大小写</p></li><li><p><strong>-user USERNAME</strong>：查找属主为指定用户的文件</p></li><li><p><strong>-group GROUPNAME</strong>：查找属组为指定属组的文件</p></li><li><p><strong>-uid UserID</strong>：查找属主为指定的ID号的文件</p></li><li><p><strong>-gid GroupID</strong>：查找属组为指定的GID号的文件 </p></li><li><p><strong>-nouser</strong>：查找没有属主的文件 </p></li><li><p><strong>-nogroup</strong>：查找没有属组的文件</p></li><li><p><strong>-size n</strong> : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组</p></li><li><p><strong>-type c</strong> : 文件类型是 c 的文件</p><ul><li>d: 目录</li></ul></li><li><p>c: 字符设备文件，即串行端口的接口设备，例如键盘、鼠标等等</p><ul><li>b: 区块设备文件，存储数据以供系统存取的接口设备</li><li>p: 管道文件，FIFO也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误，FIFO是first-in-first-out(先进先出)的缩写</li><li>f: 普通文件</li><li>l: 软链接文件，类似Windows下面的快捷方式</li><li>s: 套接字文件socket，这类文件通常用在网络数据连接。可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信</li></ul></li><li><p><strong>-maxdepth</strong>：最大深度，目录级查找，如找出 tmp 目录下的所有一级子目录<code>find /tmp -maxdepth 1 -type ... </code></p></li><li><p><strong>-mindepth</strong>：最小深度</p></li><li><p><strong>-perm</strong>：权限匹配</p><ul><li>+、- MODE：其中<code>+</code>表示最少权限，<code>-</code>表示最多为多少的权限</li><li>MODE：精确匹配某权限</li><li>/MODE：只要其中一类（u、g、o）权限匹配上即可</li></ul></li></ul><p><strong>处理动作</strong></p><ul><li><strong>‐print</strong>：默认的处理动作，显示至屏幕</li><li><strong>‐ls</strong>：类型于对查找到的文件执行<code>ls ‐l</code>命令</li><li><strong>‐delete</strong>：删除查找到的文件</li><li><strong>‐fls /path/to/somefile</strong>：查找到的所有文件的长格式信息保存至指定文件中</li><li>**‐ok COMMAND {} ;**：对查找到的每个文件执行由COMMAND指定的命令，需要确认</li><li>**‐exec COMMAND {}  ;**：对查找到的每个文件执行由COMMAND指定的命令，不需要确认</li><li><strong>{}<strong>：用于</strong>引用前面查找到的文件名称自身</strong>，表示命令结束</li></ul><p><strong>条件结合</strong></p><ul><li><strong>-a</strong>：多条件and并列</li><li><strong>-o</strong>：多条件or并列</li><li><strong>-not</strong>：条件取反</li></ul><p>ps：如果and和or都有则要加<code>()</code>,如<code>find /etc -not -user root -a \( -not -user bin -o -not -user centos \)</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># find /etc -iname "ifcfg-ens33"#不区分大小写</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc -size +5M -ls#列出路径下大于5M的文件，找到后执行ls命令</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc -size 5M -exec rm -rf {} \;#找出目录下等于5M的文件并执行删除</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># find /var ‐user root ‐group mail#查找/var目录下属主为root，且属组为mail的所有文件或目录</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># find /usr ‐not ‐user root ‐a ‐not ‐user bin ‐a ‐not ‐user centos#查找/usr目录下不属于root，bin和centos的所有文件或目录</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc ‐mtime ‐7#查看目录下一周内曾被修改过的文件</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc ‐size +1M ‐type f#查找/etc目录下大于1M且类型为普通文件的所有文件或目录</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc ‐not ‐perm /111#查找/etc目录下至少一类用户没有执行权限的文件</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># find /etc/init.d/ -perm -111 -exec cp -r {} dir1/ \;#将前面查找到的文件复制到dir1目录下</span></span><br></pre></td></tr></tbody></table></figure><h3 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h3><table><thead><tr><th>权限</th><th>对文件</th><th>对目录</th></tr></thead><tbody><tr><td>r</td><td>可以读取文件里面的内容，cat</td><td>可以列出目录里的文件名，ls</td></tr><tr><td>w</td><td>可以更改文件的内容，vim</td><td>可以创建和删除目录里的文件，touch，rm</td></tr><tr><td>x</td><td>可以作为命令执行，bash</td><td>可以访问目录里的内容，cd</td></tr></tbody></table><h4 id="修改文件属主chown"><a href="#修改文件属主chown" class="headerlink" title="修改文件属主chown"></a>修改文件属主chown</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [选项] 指定属主:属组 文件</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># chown user01:hr file.txt#将文件的拥有者设置为user01，允许使用的组设置为hr,如果只设置属主属组的话如下</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chown user01 file.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chown :hr file.txt</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chown -R user01:hr test/*#将test目录下的所有文件拥有者设置为user01，允许使用的组设置为hr</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p><strong>-R</strong>：指定目录下的子目录及以下的所有文件</p></li><li><p><strong>-v</strong>：显示详细的处理信息</p></li></ul><h4 id="修改文件权限chmod"><a href="#修改文件权限chmod" class="headerlink" title="修改文件权限chmod"></a>修改文件权限chmod</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [选项] [模式][模式] 文件</span><br></pre></td></tr></tbody></table></figure><p><strong>模式</strong></p><p><strong>ugoa</strong>：属主属组其他人全部，<strong>如果不指定默认为a</strong></p><p><strong>+-=[rwx]</strong>:增加减少文件权限</p><p><strong>选项</strong></p><ul><li><strong>-R</strong>：对当前文件及其以下目录文件都做相同的权限变更(递归)</li><li><strong>-v</strong>：显示权限变更的详细资料</li><li><strong>-f</strong>：若该文件权限无法被修改也不会显示错误讯息</li></ul><p><strong>限制用户对文件进行更改</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># chmod a-w /home/user1/file </span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -lh /home/user1/file </span></span><br><span class="line">-r--r--r--. 1 user1 user1 0 4月  13 10:56 /home/user1/file</span><br><span class="line">[root@localhost ~]<span class="comment"># su - user1</span></span><br><span class="line">上一次登录：二 4月 13 10:47:41 CST 2021pts/1 上</span><br><span class="line">[user1@localhost ~]$ <span class="built_in">echo</span> <span class="string">"hello world"</span> &gt;&gt; file </span><br><span class="line">-bash: file: 权限不够</span><br></pre></td></tr></tbody></table></figure><p><strong>限制用户删除目录的文件</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># chmod a-w /home/user1/dir/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -lhd /home/user1/dir</span></span><br><span class="line">dr-xr-xr-x. 2 user1 user1 18 4月  13 10:58 /home/user1/dir</span><br><span class="line">[root@localhost ~]<span class="comment"># su - user1</span></span><br><span class="line">上一次登录：二 4月 13 10:57:11 CST 2021pts/1 上</span><br><span class="line">[user1@localhost ~]$ <span class="built_in">cd</span> dir/</span><br><span class="line">[user1@localhost dir]$ rm -rf <span class="built_in">test</span> </span><br><span class="line">rm: 无法删除<span class="string">"test"</span>: 权限不够</span><br></pre></td></tr></tbody></table></figure><h4 id="文件访问控制列表ACL"><a href="#文件访问控制列表ACL" class="headerlink" title="文件访问控制列表ACL"></a>文件访问控制列表ACL</h4><p><strong>可以针对文件单独设置某个用户或是用户组赋予文件的权限，不影响其他用户以及文件的属主属组关系</strong></p><p><strong>getfacl</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getfacl [选项] file</span><br></pre></td></tr></tbody></table></figure><p><strong>选项</strong></p><ul><li><strong>-a</strong>：显示文件访问控制列表</li><li><strong>-c</strong>：不显示注释行内容</li><li><strong>-d</strong>：default 显示文件的默认访问控制列表</li><li><strong>-e</strong>：显示有效的权限</li><li><strong>-E</strong>：显示无效的权限</li><li><strong>-R</strong>：递归显示子目录及文件</li><li><strong>-t</strong>：使用制表符分隔的输出格式</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># getfacl -R day</span></span><br><span class="line"><span class="comment"># file: day</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">user:user1:rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br><span class="line"></span><br><span class="line"><span class="comment"># file: day/day1</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rw-</span><br><span class="line">group::r--</span><br><span class="line">other::r--</span><br><span class="line"></span><br><span class="line"><span class="comment"># file: day/day2</span></span><br><span class="line"><span class="comment"># owner: user1</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rw-</span><br><span class="line">group::r--</span><br><span class="line">other::r--</span><br><span class="line">[root@localhost ~]<span class="comment"># getfacl -d day</span></span><br><span class="line"><span class="comment"># file: day</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># getfacl -e day</span></span><br><span class="line"><span class="comment"># file: day</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">user:user1:r-x<span class="comment">#effective:r-x</span></span><br><span class="line">group::r-x<span class="comment">#effective:r-x</span></span><br><span class="line">mask::r-x</span><br><span class="line">other::r-x</span><br></pre></td></tr></tbody></table></figure><p><strong>setfacl</strong></p><p>ps：访问控制列表设置过后<code>ll</code>查看最后面会有一个“+”号，如drwxr-xr-x+ 2 root root   18 8月   2 22:50 day</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setfacl [选项] u(g):用户(用户组):权限 文件（setfacl [-bkndRLP] { -m|-M|-x|-X ... } file ...）#例如setfacl -m d:u:user1:rx day,其中d是设置默认权限，该文件夹后面创建的文件都会使用该权限，m是指定最大权限</span><br></pre></td></tr></tbody></table></figure><p><strong>选项</strong></p><ul><li><strong>-m</strong>：更改文件访问控制列表</li><li><strong>-x</strong>：删除设置过的列表条目</li><li><strong>-b</strong>：删除所有扩展访问控制列表条目</li><li><strong>-k</strong>：移除默认访问控制列表条目</li><li><strong>-R</strong>：递归操作子目录</li><li><strong>-d</strong>：应用到默认访问控制列表的操作</li><li><strong>-X</strong>：从文件读取访问控制列表条目并删除</li><li><strong>-M</strong>：从文件读取访问控制列表条目更改</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># setfacl -m g:user1:rw day</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># setfacl -m d:u:user1:rw day</span></span><br><span class="line">[root@localhost ~]<span class="comment"># getfacl -R day</span></span><br><span class="line"><span class="comment"># file: day</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">user:user1:rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br><span class="line">default:user::rwx</span><br><span class="line">default:user:user1:rw-</span><br><span class="line">default:group::r-x</span><br><span class="line">default:mask::rwx</span><br><span class="line">default:other::r-x</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># setfacl -x d:u:user2 day#删除user2的控制列表条目</span></span><br><span class="line">[root@localhost ~]<span class="comment"># getfacl -c day</span></span><br><span class="line">user::rwx</span><br><span class="line">user:user1:rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br><span class="line">default:user::rwx</span><br><span class="line">default:user:user1:rw-</span><br><span class="line">default:group::r-x</span><br><span class="line">default:mask::rwx</span><br><span class="line">default:other::r-x</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># setfacl -b day#删除所有添加过的访问控制列表条目</span></span><br><span class="line">[root@localhost ~]<span class="comment"># getfacl -c day</span></span><br><span class="line">user::rwx</span><br><span class="line">group::r-x</span><br><span class="line">other::r-x</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># setfacl -R -m u:user1:rw day</span></span><br><span class="line">[root@localhost ~]<span class="comment"># getfacl -R day</span></span><br><span class="line"><span class="comment"># file: day</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">user:user1:rw-</span><br><span class="line">group::r-x</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br><span class="line"></span><br><span class="line"><span class="comment"># file: day/day1</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rw-</span><br><span class="line">user:user1:rw-</span><br><span class="line">group::r--</span><br><span class="line">mask::rw-</span><br><span class="line">other::r--</span><br></pre></td></tr></tbody></table></figure><h4 id="mask最大权限"><a href="#mask最大权限" class="headerlink" title="mask最大权限"></a>mask最大权限</h4><p><strong>倘若mask最大值只有<code>r</code>那么无论setfacl给用户多大的权限，最终有效的权限也只有<code>r</code></strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># setfacl -m m::rwx day/day1 </span></span><br><span class="line">[root@localhost ~]<span class="comment"># getfacl -c day/day1 </span></span><br><span class="line">user::rw-</span><br><span class="line">user:user1:r-x</span><br><span class="line">group::rwx</span><br><span class="line">mask::rwx</span><br><span class="line">other::---</span><br></pre></td></tr></tbody></table></figure><h4 id="特殊权限suid-u-s-、sgid-g-s-、sticky-t"><a href="#特殊权限suid-u-s-、sgid-g-s-、sticky-t" class="headerlink" title="特殊权限suid(u+s)、sgid(g+s)、sticky(+t)"></a>特殊权限suid(u+s)、sgid(g+s)、sticky(+t)</h4><p>特殊权限的设置的前提是该用户具有<code>x</code>权限，否则加了<code>s</code>权限后也是无法以文件所有者的身份提权查看的</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># chmod g+s day</span></span><br><span class="line">drwsrwSr-x+ 2 root user1   42 8月   3 18:22 day<span class="comment">#S代表该用户组没有x权限，因此该用户组无法提权</span></span><br></pre></td></tr></tbody></table></figure><p><strong>suid</strong></p><p>suid 属性只能运用在可执行文件上，含义是开放文件所有者的权限给其他用户，即当用户执行该执行文件时，会拥有该执行文件所有者的权限</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost day]<span class="comment"># chmod u+s day1</span></span><br><span class="line">-rwsr--r--. 1 user1  root 0 8月   2 22:50 day1</span><br><span class="line">[user2@localhost day]$ rm -rf /root/day/day1</span><br></pre></td></tr></tbody></table></figure><p><strong>sgid</strong></p><p>sgid 属性可运用于文件或者目录，运用在文件的含义是开放文件所属组的权限给其他用户，即当用户执行该执行文件时，会拥有该执行文件所属组用户的权限</p><p>运用在目录上的含义是，在该目录下所有用户创建的文件或者目录的所属组都和其一样。即如果<code>/home/user1</code>目录具有sgid权限，且所属组是<code>user1</code>，则任何用户在<code>/home/user1</code>下创建的子目录或者文件的所属组都是<code>user1</code></p><p><strong>sticky</strong></p><p>sticky 权限只能运用于目录上，含义是该目录下所有的文件和子目录只能由所属者删除，即使其的权限是777或者其他。一个公共目录，每个人都可以创建文件，删除自己的文件，但不能删除别人的文件,可用于交作业</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># chmod 777 /day/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod o+t /day/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># su - user1</span></span><br><span class="line">[user1@localhost ~]$ <span class="built_in">cd</span> /day/</span><br><span class="line">[user1@localhost day]$ touch user1file</span><br><span class="line">[user1@localhost day]$ <span class="built_in">exit</span></span><br><span class="line">登出</span><br><span class="line">[root@localhost ~]<span class="comment"># su - user2</span></span><br><span class="line">[user2@localhost ~]$ <span class="built_in">cd</span> /day/</span><br><span class="line">[user2@localhost day]$ touch user2file</span><br><span class="line">[user2@localhost day]$ rm -rf user1file   <span class="comment"># 不给删除别人的文件</span></span><br><span class="line">rm: 无法删除<span class="string">"user1file"</span>: 不允许的操作</span><br><span class="line">[user2@localhost day]$ rm -rf user2file   <span class="comment"># 只能删除自己的文件</span></span><br><span class="line">[user2@localhost day]$ ll</span><br><span class="line">总用量 0</span><br><span class="line">-rw-rw----+ 1 user1 user1 0 4月  14 11:11 user1file</span><br></pre></td></tr></tbody></table></figure><h4 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a><strong>chattr</strong></h4><p>chattr命令用于改变文件属性,主要用于日志或不能让用户修改的系统文件</p><p>这项指令可改变存放在文件或目录属性，这些属性共有以下<strong>8种模式</strong>：</p><ul><li><strong>a</strong>：让文件或目录仅供附加用途</li><li><strong>b</strong>：不更新文件或目录的最后存取时间</li><li><strong>c</strong>：将文件或目录压缩后存放</li><li><strong>d</strong>：将文件或目录排除在倾倒操作之外</li><li><strong>i</strong>：不得任意更动文件或目录</li><li><strong>s</strong>：保密性删除文件或目录</li><li><strong>S</strong>：即时更新文件或目录</li><li><strong>u</strong>：预防意外删除</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr [选项] [+/-/=&lt;模式&gt;] 文件</span><br></pre></td></tr></tbody></table></figure><p><strong>选项</strong></p><ul><li><strong>-R</strong>：递归处理，将指定目录下的所有文件及子目录一并处理</li><li>**-v &lt;版本编号&gt;**：设置文件或目录版本</li><li><strong>-V</strong>：显示指令执行过程</li><li>**+ &lt;模式&gt;**：开启文件或目录的该项属性</li><li>**- &lt;模式&gt;**：关闭文件或目录的该项属性</li><li>**= &lt;模式&gt;**：指定文件或目录的该项属性</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># chattr +a /var/log/messages </span></span><br><span class="line">[root@localhost ~]<span class="comment"># lsattr /var/log/messages </span></span><br><span class="line">-----a---------- /var/<span class="built_in">log</span>/messages</span><br><span class="line">[root@localhost ~]<span class="comment"># echo &gt; /var/log/messages   # 不允许清空日志</span></span><br><span class="line">-bash: /var/<span class="built_in">log</span>/messages: 不允许的操作</span><br></pre></td></tr></tbody></table></figure><h4 id="umask"><a href="#umask" class="headerlink" title="umask"></a><strong>umask</strong></h4><p>umask命令指定在建立文件时预设的权限掩码，进程 新建文件、目录的默认权限会收到umask的影响，umask表示要减掉得到权限</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umask -S [权限掩码]#-S：以文字的方式来表示权限掩码</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># umask -S</span></span><br><span class="line">u=rwx,g=rx,o=rx</span><br></pre></td></tr></tbody></table></figure><p>修改umask的数值(临时)</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># umask 0000</span></span><br><span class="line">[root@localhost ~]<span class="comment"># mkdir dir</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll</span></span><br><span class="line">总用量 4</span><br><span class="line">drwxrwxrwx. 2 root root    6 4月  14 11:25 dir</span><br><span class="line">-rw-rw-rw-. 1 root root    0 4月  14 11:25 file</span><br></pre></td></tr></tbody></table></figure><p>修改umask的数值(永久)</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/profile</span></span><br><span class="line">--------------</span><br><span class="line"> 59 <span class="keyword">if</span> [ <span class="variable">$UID</span> -gt 199 ] &amp;&amp; [ <span class="string">"`/usr/bin/id -gn`"</span> = <span class="string">"`/usr/bin/id -un`"</span> ]; <span class="keyword">then</span></span><br><span class="line"> 60     <span class="built_in">umask</span> 002</span><br><span class="line"> 61 <span class="keyword">else</span></span><br><span class="line"> 62     <span class="built_in">umask</span> 022</span><br><span class="line"> 63 <span class="keyword">fi</span></span><br><span class="line">---------------</span><br><span class="line">[root@localhost ~]<span class="comment"># source /etc/profile        # 立即在当前shell中生效</span></span><br></pre></td></tr></tbody></table></figure><p>通过umask决定新建用户<code>HOME</code>目录的权限</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/login.defs </span></span><br><span class="line">-----------------</span><br><span class="line"> 61 <span class="comment"># The permission mask is initialized to this value. If not specified, </span></span><br><span class="line"> 62 <span class="comment"># the permission mask will be initialized to 022.</span></span><br><span class="line"> 63 UMASK           077</span><br></pre></td></tr></tbody></table></figure><p>用户特殊权限，sudo提权需要将用户写到sudoers文件里才可生效</p><p>mount -a</p><p>格式化和删除文件只是将该分区标记为0，数据还在，下次写入的话就会给覆盖掉，跟vim中的replace一样</p><h2 id="VIM文本编辑"><a href="#VIM文本编辑" class="headerlink" title="VIM文本编辑"></a>VIM文本编辑</h2><p>vim中有三种模式，分别为命令模式、插入模式和行末模式</p><p>三者之间的转换关系是：</p><p><a href="https://www.z4a.net/image/g1Khbv" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/17/-2021-07-17-195715.png" alt="-2021-07-17-195715.png"></a></p><h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><p><strong>G</strong> 末尾 数字加G跳转，<strong>gg</strong>跳转到第一行<br><strong>kjhl</strong>  分别表示上下左右 </p><p><strong>yy</strong> 复制当前行    从某某地方开始复制到某某地方，先用G到开始行再数字加yy，例如从50行道90行，即50G，40yy（用法同<strong>dd</strong>）<br><strong>p ** 粘贴<br><strong>dd</strong>  删除当前行   跟复制一样的方法 40dd删除40行  dd删除的内容同时在剪切板里 （</strong>dG<strong>：删除光标所在处到最后一行的所有数据，可以搭配数字使用，即dnG，n为数字。d$，删除光标所在处，到该</strong>行**的最后一个字符。d0，删除光标所在处，到该行的最前面一个字符）</p><p><strong>x</strong> 向后删除某某行的多少个字符（X为向前删除），先到那行然后数字加x，例如27行的前15个字符  27G，15x<br><strong>o</strong> 新增一行<br><strong>u</strong> 撤销<br><strong>r</strong> 用来替换单个字符</p><p><strong>Ctrl+r</strong> 重复上一个动作</p><h4 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h4><p><strong>Page Up</strong>/<strong>Page Down</strong> 上/下翻页</p><p><strong>按Insert</strong> 切换光标为插入/替换模式，光标将变成竖线/下划线，跟命令模式下的<code>r</code>不一样的是其为光标连续向后替换</p><h4 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h4><p><strong>wq（若为 :wq! 则为强制储存后离开 (常用)）、x</strong> 是保存退出<br><strong>w</strong> 加路径为另存为</p><p><strong>n1,n2 w [filename]</strong> 将 n1 到 n2 的内容储存成 filename 这个文件</p><p><strong>set nu</strong>  显示行号 set nonu取消行号  永久生效写在vim ~/ .vimrc(<strong>仅限该用户目录下</strong>），vim /etc/vimrc (<strong>全局</strong>）<br><strong>set sm</strong> 括号匹配，便于查看</p><p><strong>! command</strong> 暂时离开vim到bash下执行命令显示结果，例如：! ls /etc/hosts</p><p><strong>/或？</strong>字符匹配<br><strong>50,100s/man/MAN/gc</strong>   50到100行man替换成MAN，其中c是询问是否替换,g是这一行匹配到的全替换   全部替换1,$s/man/MAN/gc(%s/man/MAN/g    %为全部替换)，s其实是指定后面的分隔符/是常用的</p><p><strong>0，$d</strong>或**%d**亦可删除全文</p><p><strong>r</strong> /etc/passwd可以将该文件里的内容复制过来</p><table><thead><tr><th>/</th><th>从上至下搜索某个关键词，如“/linux”</th></tr></thead><tbody><tr><td>?</td><td>从下至上搜索某个关键词，如“?linux”</td></tr><tr><td>n</td><td>定位到下一个搜索到的关键词</td></tr><tr><td>N</td><td>定位到上一个搜索到的关键词</td></tr></tbody></table><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><h4 id="nmtui命令"><a href="#nmtui命令" class="headerlink" title="nmtui命令"></a>nmtui命令</h4><p><strong>尽量用”nmtui”命令去修改，因为不同的Linux版本的配置文件可能不在一个地方</strong></p><h4 id="nmcli命令"><a href="#nmcli命令" class="headerlink" title="nmcli命令"></a>nmcli命令</h4><p>nmcli命令和配置文件的对应关系</p><p><img src="https://www.z4a.net/images/2021/09/02/-2021-09-02-213212.png" alt="-2021-09-02-213212.png"></p><ul><li>查看接口信息</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># nmcli device status</span></span><br><span class="line">DEVICE  TYPE      STATE   CONNECTION </span><br><span class="line">ens33   ethernet  连接的  ens33      </span><br><span class="line">lo      loopback  未托管  --</span><br></pre></td></tr></tbody></table></figure><ul><li>查看接口的连接信息</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># nmcli connection show</span></span><br><span class="line">NAME   UUID                                  TYPE      DEVICE </span><br><span class="line">ens33  a70d7305-4d38-444b-a476-70b56e75c1a8  ethernet  ens33</span><br></pre></td></tr></tbody></table></figure><ul><li>启动或关闭接口</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># nmcli connection up ens33</span></span><br><span class="line">连接已成功激活（D-Bus 活动路径：/org/freedesktop/NetworkManager/ActiveConnection/2）</span><br><span class="line">[root@localhost ~]<span class="comment"># nmcli connection down ens33</span></span><br></pre></td></tr></tbody></table></figure><ul><li>创建新连接</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># nmcli connection add type ethernet con-name dhcp_ens33 ifname ens33</span></span><br><span class="line">连接“dhcp_ens33”(08a20d03-983d-41e3-b545-589d861d66e3) 已成功添加。</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># nmcli connection show</span></span><br><span class="line">NAME        UUID                                  TYPE      DEVICE </span><br><span class="line">ens33       a70d7305-4d38-444b-a476-70b56e75c1a8  ethernet  ens33  </span><br><span class="line">dhcp_ens33  08a20d03-983d-41e3-b545-589d861d66e3  ethernet  --  <span class="comment">#如果启用的话上面的ens33将会被关闭</span></span><br></pre></td></tr></tbody></table></figure><ul><li>给新创建的连接配置网络</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># nmcli connection modify dhcp_ens33 ipv4.addresses 192.168.81.90/24 ipv4.gateway 192.168.81.2 ipv4.dns 114.114.114.114 ipv4.method manual autoconnect yes</span></span><br></pre></td></tr></tbody></table></figure><ul><li>删除连接</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># nmcli connection delete dhcp_ens33 </span></span><br><span class="line">成功删除连接 <span class="string">'dhcp_ens33'</span>（08a20d03-983d-41e3-b545-589d861d66e3）。</span><br></pre></td></tr></tbody></table></figure><h4 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br></pre></td></tr></tbody></table></figure><p>centos7的静态IP配置，网关不能配错</p><p><a href="https://www.z4a.net/image/gLO0Cj" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/19/-2021-07-19-160444.png" alt="-2021-07-19-160444.png"></a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/sysconfig/network-scripts/ifcfg-ens33</span></span><br><span class="line">TYPE=<span class="string">"Ethernet"</span></span><br><span class="line">PROXY_METHOD=<span class="string">"none"</span></span><br><span class="line">BROWSER_ONLY=<span class="string">"no"</span></span><br><span class="line">BOOTPROTO=<span class="string">"static"</span></span><br><span class="line">IPADDR=192.168.81.140</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.81.2</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">DNS2=114.114.115.115</span><br><span class="line">DEFROUTE=<span class="string">"yes"</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">"no"</span></span><br><span class="line">IPV6INIT=<span class="string">"yes"</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">"yes"</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">"yes"</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">"no"</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">"stable-privacy"</span></span><br><span class="line">NAME=<span class="string">"ens33"</span></span><br><span class="line">UUID=<span class="string">"8d7bd73a-8878-45be-b9b1-5ea8a49b808d"</span></span><br><span class="line">DEVICE=<span class="string">"ens33"</span></span><br><span class="line">ONBOOT=<span class="string">"yes"</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl restart network#重启网络</span></span><br></pre></td></tr></tbody></table></figure><h2 id="ssh（远程控制服务"><a href="#ssh（远程控制服务" class="headerlink" title="ssh（远程控制服务)"></a>ssh（远程控制服务)</h2><ul><li>ssh客户端是一种使用Secure Shell(ssh)协议连接到运行了ssh服务端的远程服务器上的工具</li><li>ssh是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议<ul><li>有效防止远程管理过程中的信息泄漏</li><li>传输<strong>数据加密</strong>，能够防止DNS和IP欺骗</li><li>传输<strong>数据压缩</strong>，加快传输速度</li></ul></li></ul><p><strong>ssh提供两种安全验证方法</strong>：</p><ul><li>基于口令验证–用账户和密码验证</li><li>基于密钥验证–需要在本地生成密钥对。公钥上传至服务端，并通过本地私钥与服务器中的公钥进行比对，相较来说比较安全</li></ul><p><strong>公钥、私钥</strong></p><p>公钥是任何人都可以下载到的资源，私钥可以推算出公钥，而公钥不能推算出私钥，公钥加密的内容只有私钥可以解密，私钥加密的内容是为了数据来源可靠、合法，谁来解开都一样，比如数字证书、签名等，因此私钥加密的内容公钥私钥都能解开</p><p>scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令</p><h4 id="ssh客户端使用"><a href="#ssh客户端使用" class="headerlink" title="ssh客户端使用"></a>ssh客户端使用</h4><p><strong>通过scp来远程管理文件</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># scp -P22 -r -p root@192.168.175.147:/tmp/file /root/# 将远程主机的文件复制到本地</span></span><br></pre></td></tr></tbody></table></figure><p><strong>ssh自带的sftp功能</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># sftp -oPort=22 root@192.168.175.147</span></span><br><span class="line">root@192.168.175.147<span class="string">'s password: </span></span><br><span class="line"><span class="string">Connected to 192.168.175.147.</span></span><br><span class="line"><span class="string">sftp&gt; put /etc/hosts /tmp  </span></span><br><span class="line"><span class="string">sftp&gt; get /etc/hosts /root# 使用sftp在两台主机之前互相传递文件</span></span><br><span class="line"><span class="string">sftp&gt; !tree /etc &gt; /root/tree.txt#"!"表示执行[root@localhost ~]#系统命令，相当于在主机里面执行，看的是主机的内容</span></span><br></pre></td></tr></tbody></table></figure><h4 id="sshd配置文件"><a href="#sshd配置文件" class="headerlink" title="sshd配置文件"></a>sshd配置文件</h4><p>sshd服务的配置文件在<code>/etc/ssh/sshd_config</code>中，该文件也被称为主配置文件</p><p><strong>关闭密码登录</strong></p><p>修改ssh的配置文件/etc/ssh/sshd_config</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/ssh/sshd_config</span></span><br><span class="line">..................</span><br><span class="line">65 PasswordAuthentication no</span><br><span class="line">...................</span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl restart sshd</span></span><br></pre></td></tr></tbody></table></figure><p><strong>sshd服务中的参数及作用：</strong></p><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Port 22</td><td align="left">默认的sshd服务端口</td></tr><tr><td align="left">ListenAddress 0.0.0.0</td><td align="left">设定sshd服务器监听的IP地址</td></tr><tr><td align="left">Protocol 2</td><td align="left">SSH协议的版本号</td></tr><tr><td align="left">HostKey /etc/ssh/ssh_host_key</td><td align="left">SSH协议版本为1时，DES私钥存放的位置</td></tr><tr><td align="left">HostKey /etc/ssh/ssh_host_rsa_key</td><td align="left">SSH协议版本为2时，RSA私钥存放的位置</td></tr><tr><td align="left">HostKey /etc/ssh/ssh_host_dsa_key</td><td align="left">SSH协议版本为2时，DSA私钥存放的位置</td></tr><tr><td align="left">PermitRootLogin yes</td><td align="left">设定是否允许root管理员直接登录</td></tr><tr><td align="left">StrictModes yes</td><td align="left">当远程用户的私钥改变时直接拒绝连接</td></tr><tr><td align="left">MaxAuthTries 6</td><td align="left">最大密码尝试次数</td></tr><tr><td align="left">MaxSessions 10</td><td align="left">最大终端数</td></tr><tr><td align="left">PasswordAuthentication yes</td><td align="left">是否允许密码验证</td></tr><tr><td align="left">PermitEmptyPasswords no</td><td align="left">是否允许空密码登录（很不安全）</td></tr></tbody></table><h4 id="xshell做免密登录"><a href="#xshell做免密登录" class="headerlink" title="xshell做免密登录"></a><strong>xshell做免密登录</strong></h4><p><a href="https://www.z4a.net/image/gLwT8G" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/19/image-20210719201243449.png" alt="image-20210719201243449.png"></a></p><p><a href="https://www.z4a.net/image/gLwgNI" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/19/QQ20210719201516.png" alt="QQ20210719201516.png"></a></p><p>接下来一直“下一步”期间可以给私钥设置密码</p><p><a href="https://www.z4a.net/image/gLwmCO" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/19/-2021-07-19-201824.png" alt="-2021-07-19-201824.png"></a></p><p>可以选择保存文件或是直接复制内容粘贴到Linux的/root/.ssh(如果没有ssh文件，就是没有用root用户登录过,执行ssh localhost， 输入yes 后输入密码即可)目录下的authorized_keys文件里</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /root/.ssh</span></span><br><span class="line">[root@localhost .ssh]<span class="comment"># ls</span></span><br><span class="line">authorized_keys  key.pub</span><br><span class="line">[root@localhost .ssh]<span class="comment"># cat key.pub &gt; authorized_keys</span></span><br></pre></td></tr></tbody></table></figure><p>然后选中公钥导出私钥</p><p><img src="https://www.z4a.net/images/2021/07/19/QQ20210719202401.png" alt="QQ20210719202401.png"></p><p>将私钥导入</p><p><a href="https://www.z4a.net/image/gLwhen" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/19/image-20210719203044872.png" alt="image-20210719203044872.png"></a></p><p>选择私钥登录即可，密码是一开始设置的私钥密码</p><p><a href="https://www.z4a.net/image/gLwsn6" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/19/-2021-07-19-203821.png" alt="-2021-07-19-203821.png"></a></p><h4 id="Linux虚拟主机上做免密登录"><a href="#Linux虚拟主机上做免密登录" class="headerlink" title="Linux虚拟主机上做免密登录"></a><strong>Linux虚拟主机上做免密登录</strong></h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ssh-keygen</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:O9koGMxGqbTWVCjptvfpMBb8ktI/kbfUcPvVI1dXcQE root@localhost.localdomain</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|   . ..      E.o+|</span></span><br><span class="line"><span class="string">|  o .o          o|</span></span><br><span class="line"><span class="string">| ...+           .|</span></span><br><span class="line"><span class="string">| .oX    . .     o|</span></span><br><span class="line"><span class="string">| .+.O  .S+ .   .o|</span></span><br><span class="line"><span class="string">| ..o.*o o=o  ..o.|</span></span><br><span class="line"><span class="string">|  ..O.o==... .o .|</span></span><br><span class="line"><span class="string">|   o =+...  .    |</span></span><br><span class="line"><span class="string">|     .o.         |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">[root@localhost ~]# ssh-copy-id 192.168.81.140##将公钥发送给客户机</span></span><br></pre></td></tr></tbody></table></figure><p><strong>不对称加密</strong></p><p>算法有：</p><blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$1      MD5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$5      SHA-256</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$6      SHA-512</span><br></pre></td></tr></tbody></table></figure></blockquote><h2 id="不间断会话服务screen"><a href="#不间断会话服务screen" class="headerlink" title="不间断会话服务screen"></a>不间断会话服务screen</h2><h4 id="管理远程会话"><a href="#管理远程会话" class="headerlink" title="管理远程会话"></a>管理远程会话</h4><p><strong>screen多窗口远程控制的开源协议程序</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen [选项] 会话</span><br></pre></td></tr></tbody></table></figure><p>选项</p><ul><li><strong>-S</strong>：创建会话窗口</li></ul><ul><li><p><strong>-x：</strong>恢复离线会话，并可以实现会话共享</p></li><li><p><strong>-ls</strong>：查看当前已有会话</p></li><li><p><strong>-d：</strong>将指定会话进行离线处理</p></li><li><p><strong>-wipe：</strong>把目前无法使用的会话删除</p></li><li><p><strong>-r ：</strong>恢复离线的screen会话</p></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># screen -S window#此时就进入了一个新的会话窗口</span></span><br><span class="line">[root@localhost ~]<span class="comment"># screen -ls</span></span><br><span class="line">There is a screen on:</span><br><span class="line">        18784.window    (Attached)</span><br><span class="line">1 Socket <span class="keyword">in</span> /var/run/screen/S-root.</span><br><span class="line">[root@localhost ~]<span class="comment"># screen -d window#将会话进入离线状态</span></span><br><span class="line">[root@localhost ~]<span class="comment"># screen -r window#恢复此会话</span></span><br></pre></td></tr></tbody></table></figure><ul><li>想要退出会话按<code>exit</code></li><li>想要将会话挂到后台可以直接关闭终端或者按<code>ctrl</code>+<code>a</code>+<code>d</code></li></ul><p>在日常的生产环境中，其实并不是必须先创建会话，然后再开始工作。可以直接使用screen命令执行要运行的命令，这样在命令中的一切操作也都会被记录下来，当命令执行结束后screen会话也会自动结束</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># screen ping -c 3 baidu.com</span></span><br><span class="line">[screen is terminating]</span><br></pre></td></tr></tbody></table></figure><h4 id="会话共享功能"><a href="#会话共享功能" class="headerlink" title="会话共享功能"></a>会话共享功能</h4><p>可以让多个登录主机的用户同时共享一个screen会话窗口</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># screen -x window</span></span><br></pre></td></tr></tbody></table></figure><h2 id="查看正在运行的程序"><a href="#查看正在运行的程序" class="headerlink" title="查看正在运行的程序"></a>查看正在运行的程序</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w<span class="comment">#显示当前正在运行的程序</span></span><br><span class="line">ps aux<span class="comment">#显示所有进程</span></span><br><span class="line">top-d 1<span class="comment">#任务管理器，可以设置秒刷新一次</span></span><br><span class="line">watch -n 1 `ps aux`<span class="comment">#一秒刷新一次</span></span><br></pre></td></tr></tbody></table></figure><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="相关的文件"><a href="#相关的文件" class="headerlink" title="相关的文件"></a>相关的文件</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd<span class="comment">#记录Linux里所有用户，其中x表示的是用户密码信息</span></span><br><span class="line">/etc/group<span class="comment">#记录所有的组个组id</span></span><br><span class="line">/etc/shadow<span class="comment">#记录用户的密码信息（影子文件），格式中密码占位置太长了，所以使用x来替代，Linux系统会到shadow中查找x部分的的密码内容</span></span><br><span class="line">/etc/default/useradd<span class="comment">#添加用户时的默认设置</span></span><br><span class="line">    <span class="comment">#useradd defaults file</span></span><br><span class="line">    GROUP=100</span><br><span class="line">    HOME=/home <span class="comment">#把用户的家目录建在/home中；</span></span><br><span class="line">    INACTIVE=-1<span class="comment">#是否启用帐号过期停权，-1表示不启用；</span></span><br><span class="line">    EXPIRE=<span class="comment">#帐号终止日期，不设置表示不启用；</span></span><br><span class="line">    SHELL=/bin/bash<span class="comment">#所用SHELL的类型；</span></span><br><span class="line">    SKEL=/etc/skel<span class="comment">#默认添加用户的目录默认文件存放位置；也就是说，当我们用useradd添加用户时，用户家目录下的文件，都是从这个目录中复制过去的。这个目录记录着用户和组添加是的默认用户环境，假如通过修改/etc/passwd来添加用户，然后自己指定这个用户的家目录，再从/etc/skel复制到用户家目录里，再通过chown来改变用户的家目录属主</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># head -n 1 /etc/shadow</span></span><br><span class="line">root:<span class="variable">$6</span><span class="variable">$frokclXSnQa8EbKs</span><span class="variable">$pWElbjPlmxjYh30tr8qLsTQVOhuPg7GmW9Sanm2yXAK8TNMgje1gyc</span>/vwPgqvmSMf6VaoEvveM0gFvtETmXy/.::0:99999:7:::</span><br><span class="line"><span class="comment"># 这个格式为用户名：加密密码：最后一次修改时间：最小修改时间间隔：密码有效期：密码需要变更前的警告天数：密码过期后的宽限时间：账号失效时间：保留字段</span></span><br></pre></td></tr></tbody></table></figure><p>加密算法默认是<code>$6</code>，这个类型6的加密算法是sha-512</p><h3 id="用户信息查看"><a href="#用户信息查看" class="headerlink" title="用户信息查看"></a>用户信息查看</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id [选项] [用户]</span><br></pre></td></tr></tbody></table></figure><p><strong>选项</strong></p><p><strong>-g</strong>：显示用户所属组的ID</p><p><strong>-G</strong>：显示用户所属附加组的ID</p><p><strong>-n</strong>：显示用户，所属群组或附加群组的名称</p><p><strong>-r</strong>：显示实际ID</p><p><strong>-u</strong>：显示用户ID</p><h3 id="用户及用户组"><a href="#用户及用户组" class="headerlink" title="用户及用户组"></a>用户及用户组</h3><p><img src="https://www.z4a.net/images/2021/08/30/-2021-08-30-202157.png" alt="-2021-08-30-202157.png"></p><h4 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h4><p><strong>组的添加和删除</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># groupadd hr -g 2000#创建用户组并指定组id</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupdel hr#删除用户组</span></span><br></pre></td></tr></tbody></table></figure><p><strong>组的修改</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod [选项] [用户组]  /groupmod [-g gid [-o]] [-n new_group] group</span><br></pre></td></tr></tbody></table></figure><p><strong>选项</strong></p><p><strong>-g</strong>：将组 ID 改为 GID</p><p><strong>-n</strong>：修改组名字</p><p><strong>-o</strong>:允许使用重复的Gid</p><p>案例</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># groupmod -g 1003 group1#将group1用户组的gid修改为1003</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupmod -n group2 group1#将group1改为group2</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupmod -g 1003 -o group2#Gid1003可以重复使用</span></span><br></pre></td></tr></tbody></table></figure><h4 id="用户组成员管理"><a href="#用户组成员管理" class="headerlink" title="用户组成员管理"></a>用户组成员管理</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd [选项] [用户组]</span><br></pre></td></tr></tbody></table></figure><p><strong>选项</strong></p><p><strong>-a</strong>：添加用户到组</p><p><strong>-d</strong>：从组删除用户</p><p><strong>-A</strong>：指定管理员</p><p><strong>-M</strong>：指定组成员和-A的用途差不多</p><p><strong>-R</strong>：限制用户登入组，只有组中的成员才可以用newgrp加入该组</p><p>案例</p><p>创建用户user01和user02以及用户组hr</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># gpasswd -a user01 hr#将用户加入hr组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gpasswd -M user01,user02 hr#同时给用户1、2指定用户组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gpasswd -d user01 hr#删除用户3的属组</span></span><br></pre></td></tr></tbody></table></figure><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><table><thead><tr><th>uid:0</th><th>特权用户</th></tr></thead><tbody><tr><td>uid:1~999</td><td>系统用户</td></tr><tr><td>uid:1000+</td><td>普通用户</td></tr></tbody></table><p>-g -G 仅适用useradd创建用户时使用,-g -G 指定的组必须事先存在</p><p>删除用户时要删干净的话用：userdel **-r **user01，-r为删除用户登入目录以及用户目录中的所有文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># useradd user01 -u 2000 -g hr#创建用户并指定uid和用户组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># useradd user02 -u 3000 -G hr#创建用户并指定附加组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># useradd user03 -d /user03#指定用户家目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># useradd user04 -s /sbin/nologin#创建用户并指定shell</span></span><br><span class="line">[root@localhost ~]<span class="comment"># usermod -g group1 user01#将user01主组改为group1</span></span><br><span class="line">[root@localhost ~]<span class="comment"># usermod -s /sbin/nologin user04#修改用户的shell</span></span><br><span class="line"> [root@localhost ~]<span class="comment"># passwd user04#修改用户密码，root可以直接修改用户密码，而普通用户必须先输入原密码才可以修改</span></span><br><span class="line">[root@localhost ~]<span class="comment"># userdel -r user02#删除用户user02,并且同时删除用户的home和mail</span></span><br><span class="line">[root@localhost ~]<span class="comment"># id user1#可以查看用户的所属属性</span></span><br><span class="line">uid=1002(user03) gid=1008(user03) 组=1008(user03),1001(hr)</span><br><span class="line">[root@localhost ~]<span class="comment"># id user1 uid=1001(user1) gid=1006(user1) hr=1006(user1)#修改用户的uid和gid</span></span><br></pre></td></tr></tbody></table></figure><p><strong>添加用户</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd [选项] [用户名]</span><br></pre></td></tr></tbody></table></figure><p><strong>选项</strong></p><p><strong>-c comment</strong>：指定一段注释性描述</p><p><strong>-d 目录</strong>：指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录</p><p><strong>-m</strong>：创建用户的主目录</p><p><strong>-g 用户组</strong>：指定用户所属的用户组，默认会创建一个和用户名同名的用户组</p><p><strong>-G 用户组</strong>：用户组 指定用户所属的附加组，一个用户可以属于多个附加组</p><p><strong>-s Shell文件</strong>：指定用户的登录Shell</p><p><strong>-u 用户号</strong>：指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号</p><p><strong>用户的修改</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod [选项] [用户名]</span><br></pre></td></tr></tbody></table></figure><p><strong>选项</strong></p><p>**-c &lt;备注&gt;**：修改用户帐号的备注文字。</p><p><strong>-a</strong>：追加，默认的修改是覆盖</p><p>**-d &lt;登入目录&gt;**：修改用户登入时的目录，即家目录</p><p>**-e &lt;有效期限&gt;**：修改帐号的有效期限</p><p>**-f &lt;缓冲天数&gt;**：修改在密码过期后多少即关闭该帐号</p><p>**-g &lt;群组&gt;**：修改用户所属的群组</p><p>**-G &lt;群组&gt;**：修改用户所属的附加群组</p><p>**-l &lt;帐号名称&gt;**：修改用户帐号名称</p><p><strong>-L</strong>：锁定用户密码，使密码无效</p><p>**-s <shell>**：修改用户登入后所使用的shell</shell></p><p>**-u <uid>**：修改用户ID</uid></p><p><strong>-U</strong>：解除密码锁定</p><p>案例</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># usermod -g group1 user01#将user01主组改为group1</span></span><br><span class="line">[root@localhost ~]<span class="comment"># usermod -s /sbin/nologin user04#修改用户的shell</span></span><br><span class="line">[root@localhost ~]<span class="comment"># usermod -d /home user01#指定用户家目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># su - user01</span></span><br><span class="line">-bash-4.2$ <span class="built_in">pwd</span></span><br><span class="line">/home</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># usermod -u 6666 user01#修改用户的uid</span></span><br></pre></td></tr></tbody></table></figure><h3 id="passwd文件的shell"><a href="#passwd文件的shell" class="headerlink" title="passwd文件的shell"></a>passwd文件的shell</h3><p>查看<code>/etc/passwd</code>文件会发现在每行的最后是<strong>登录成功之后执行的命令</strong>，有两种是使用最为频繁的：</p><ul><li>/bin/bash：这个是Linux的命令行工具，我们正常登陆之后默认就是进入命令行</li><li>/sbin/nologin：如果写成nologin，那么用户将无法登录，有些用户是作为进程权限管理而存在的，不需要登录。如果提供登录的功能反而不安全，所以写成nologin</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cat /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></tbody></table></figure><p>新建一个用户，然后尝试自定义登录成功之后执行的命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># useradd test1 -s /bin/vi</span></span><br><span class="line">[root@localhost ~]<span class="comment"># su - test1#登录成功后就会打开vi</span></span><br><span class="line">[root@localhost ~]<span class="comment"># tail -n 1 /etc/passwd</span></span><br><span class="line">test1:x:1001:1001::/home/test1:/bin/vi</span><br></pre></td></tr></tbody></table></figure><h3 id="login-defs文件"><a href="#login-defs文件" class="headerlink" title="login.defs文件"></a>login.defs文件</h3><p><code>/etc/login.defs</code>文件是用来创建用户时进行一定的限制，但是优先级低于<code>/etc/passwd</code>和<code>/etc/shadow</code>,如果有冲突的地方,系统会以<code>/etc/passwd</code>和<code>/etc/shadow</code>为准</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># egrep -v '^[ ]*$|^#' /etc/login.defs  </span></span><br><span class="line">MAIL_DIR    /var/spool/mail  <span class="comment"># 系统消息(邮件)文件夹</span></span><br><span class="line">PASS_MAX_DAYS   99999        <span class="comment"># 密码有效最大天数 </span></span><br><span class="line">PASS_MIN_DAYS   0            <span class="comment"># 密码有效最小天数</span></span><br><span class="line">PASS_MIN_LEN    5            <span class="comment"># 密码长度</span></span><br><span class="line">PASS_WARN_AGE   7            <span class="comment"># 密码失效警告倒计时</span></span><br><span class="line">UID_MIN                  1000    <span class="comment"># 用户UID最小1000</span></span><br><span class="line">UID_MAX                 60000    <span class="comment"># 用户UID最大60000</span></span><br><span class="line">SYS_UID_MIN               201    <span class="comment"># 系统用户UID最小201</span></span><br><span class="line">SYS_UID_MAX               999    <span class="comment"># 系统用户UID最大999</span></span><br><span class="line">GID_MIN                  1000    <span class="comment"># 用户组GID最小1000</span></span><br><span class="line">GID_MAX                 60000    <span class="comment"># 用户组GID最大60000</span></span><br><span class="line">SYS_GID_MIN               201</span><br><span class="line">SYS_GID_MAX               999</span><br><span class="line">CREATE_HOME yes              <span class="comment"># 创建家目录</span></span><br><span class="line">UMASK           077          <span class="comment"># 创建文件/目录的权限掩码</span></span><br><span class="line">USERGROUPS_ENAB yes          <span class="comment"># 创建用户时同时生成组是  如果此处是no 创建的用户 会是gid=100(users)groups=100(users) </span></span><br><span class="line">ENCRYPT_METHOD SHA512        <span class="comment"># 加密方法sha 512 这个方法生成的密码在/etc/shadow里面的第二列会以$6$开头</span></span><br></pre></td></tr></tbody></table></figure><h3 id="chage"><a href="#chage" class="headerlink" title="chage"></a>chage</h3><p>chage是用于更改用户密码过期信息</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chage [选项] [用户]</span><br></pre></td></tr></tbody></table></figure><p><strong>选项</strong></p><p><strong>-d</strong>：将最近一次修改密码设置时间设为“最近日期”</p><p><strong>-E 过期日期</strong>：将帐户过期时间设为“过期日期”</p><p><strong>-I INACITVE</strong>：过期 INACTIVE 天数后，设定密码为失效状态</p><p><strong>-l</strong>：显示帐户年龄信息</p><p><strong>-m 最小天数</strong>：将两次改变密码之间相距的最小天数设为“最小天数”</p><p><strong>-M 最大天数</strong>：将两次改变密码之间相距的最大天数设为“最大天数”</p><p><strong>-W 警告天数</strong>：将过期警告天数设为“警告天数”</p><p>案例</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># chage -d 0 test01</span></span><br><span class="line">[root@localhost ~]<span class="comment"># logout</span></span><br><span class="line">You must change your password now and login again!</span><br><span class="line">更改用户 test01 的密码 。</span><br><span class="line">为 test01 更改 STRESS 密码。</span><br><span class="line">（当前）UNIX 密码：</span><br></pre></td></tr></tbody></table></figure><h3 id="sudoers"><a href="#sudoers" class="headerlink" title="sudoers"></a>sudoers</h3><p>Linux是多用户多任务的操作系统, 共享该系统的用户往往不只一个。出于安全性考虑, 有必要通过useradd创建一些非root用户, 只让它们拥有不完全的权限; 如有必要，再来提升权限执行。</p><p>sudo就是来解决这个需求的: 这些<strong>非root</strong>用户不需要知道root的密码，就可以<strong>提权到root</strong>，<strong>执行一些root才能执行的命令</strong></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo [选项] [用户名] [命令]</span><br></pre></td></tr></tbody></table></figure><p><strong>选项</strong></p><p><strong>-u</strong>：以指定用户或 ID 运行命令(或编辑文件)</p><p><strong>-l</strong>：显示出自己（执行 sudo 的使用者）的权限</p><p><strong>-b</strong>：将要执行的指令放在后台执行</p><p><strong>-i</strong>： 以目标用户身份运行一个登录 shell；可同时指定一条命令。相当于切换到root，不过只需要用户自己的密码即可</p><h4 id="sudo命令执行过程"><a href="#sudo命令执行过程" class="headerlink" title="sudo命令执行过程"></a>sudo命令执行过程</h4><ol><li>当用户执行sudo时，系统会主动寻找<code>/etc/sudoers</code>文件，判断该用户是否有执行sudo的权限（如果不再sudoers文件中将会被报告到/var/spool/mail/root）</li><li>确认用户具有可执行sudo的权限后，让用户输入用户自己的密码确认</li><li>若密码输入成功，则开始执行sudo后续的命令</li></ol><h4 id="赋予用户sudo权限"><a href="#赋予用户sudo权限" class="headerlink" title="赋予用户sudo权限"></a>赋予用户sudo权限</h4><p>通过useradd添加的用户，并不具备sudo权限。在ubuntu/centos等系统下, 需要将用户加入<strong>admin</strong>组或者<strong>wheel</strong>组或者<strong>sudo</strong>组。以root用户身份执行如下命令, 将用户加入wheel、admin、sudo组</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usermod -a -G wheel &lt;用户名&gt;<span class="comment">#-a为追加</span></span><br><span class="line"></span><br><span class="line">groupadd wheel<span class="comment">#如果提示wheel组不存在, 则还需要先创建该组</span></span><br></pre></td></tr></tbody></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#  egrep -v '^[ ]*$|^#' /etc/sudoers</span></span><br><span class="line">......</span><br><span class="line">Defaults    env_reset,pwfeedback,timestamp_timeout=20<span class="comment">#设置用户提权后20分钟内不再需要输入密码</span></span><br><span class="line">......</span><br><span class="line">rootALL=(ALL) ALL</span><br><span class="line">%wheelALL=(ALL)ALL</span><br><span class="line">%group1 ALL=(root)      /usr/bin/yum<span class="comment">#所有主机登录group1组中的用户都可以提权到root用户来执行yum命令</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字段1 字段2 =[(字段3)] [字段4] 字段5</span><br><span class="line">授权用户/组 主机=[(提权到哪些用户或组执行)] [是否需要输入密码验证 :] 命令1,命令2,...</span><br></pre></td></tr></tbody></table></figure><p>凡是<code>[ ]</code>中的内容, 都能省略; 命令和命令之间用<code>,</code>号分隔，字段3、字段4，是可以省略的</p><ul><li>字段1：<strong>不以%<strong>号开头的表示”将要授权的</strong>用户</strong>“，<strong>以%<strong>号开头的表示”将要授权的</strong>组</strong>“</li><li>字段2：表示允许登录的主机, ALL表示所有，;如果该字段不为ALL,表示授权用户只能在某些机器上登录本服务器来执行sudo命令<ul><li>比如:<code>jack mycomputer= /usr/sbin/reboot,/usr/sbin/shutdown</code>表示: 普通用户jack在主机(或主机组)mycomputer上, 可以通过sudo执行reboot和shutdown两个命令</li></ul></li><li>字段3：如果<strong>省略, 相当于(root:root)<strong>，表示可以通过sudo</strong>提权到root</strong>，如果为(ALL)或者(ALL:ALL), 表示能够提权到(<strong>任意用户:任意用户组)</strong></li><li>字段4：可能取值是NOPASSWD。注意NOPASSWD后面带有冒号<code>:</code>。表示执行sudo时可以不需要输入密码。<ul><li>比如:<code>lucy ALL=(ALL) NOPASSWD: /bin/useradd</code>表示: 普通用户lucy可以在任何主机上, 通过sudo执行/bin/useradd命令, 并且不需要输入密码</li></ul></li><li>字段5：是使用逗号分开一系列命令,这些命令就是授权给用户的操作; ALL表示允许所有操作。命令都是使用绝对路径, 这是为了避免目录下有同名命令被执行，从而造成安全隐患<ul><li>如果你将授权写成如下安全性欠妥的格式:<code>lucy ALL=(ALL) chown,chmod,useradd</code>那么用户就有可能创建一个他自己的程序, 也命名为<code>useradd</code>, 然后放在它的本地路径中, 如此一来他就能够使用root来执行这个”名为useradd的程序”。这是相当危险的</li></ul></li></ul><h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><ul><li><p>在实践中,去编辑<code>/etc/sudoers</code>文件，系统提示我没权限，这是因为<code>/etc/sudoers</code>的内容如此敏感，以至于该文件是只读的。所以，编辑该文件前，请确认清楚你知道自己正在做什么</p></li><li><p>强烈建议通过<code>visudo</code>命令来修改该文件，通过<code>visudo</code>修改，如果配置出错，会有提示</p></li><li><p>官方文档推荐的做法，不是直接修改<code>/etc/sudoers</code>文件，而是将修改写在<code>/etc/sudoers.d/</code>目录下的文件中。如果使用这种方式修改sudoers，需要在<code>/etc/sudoers</code>文件的最后行，加上<code>#includedir /etc/sudoers.d</code>一行(默认已有)。需要注意，这个<code>#includedir /etc/sudoers.d</code>中的<code>#</code>并不是注释，请勿修改</p></li></ul><p>案例</p><p>创建用户user01，将其添加到/etc/sudoers文件中。将用户加入<strong>admin</strong>组或者<strong>wheel</strong>组或者<strong>sudo</strong>组亦可</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># useradd user01</span></span><br><span class="line">[root@localhost ~]<span class="comment"># echo 123456 | passwd --stdin user#设置密码</span></span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/sudoers</span></span><br><span class="line">......</span><br><span class="line">rootALL=(ALL) ALL</span><br><span class="line">user01    ALL=(root)   /bin/chown,!/usr/bin/yum</span><br><span class="line">%wheelALL=(ALL)ALL</span><br><span class="line">[root@localhost ~]<span class="comment"># su - user01</span></span><br></pre></td></tr></tbody></table></figure><ul><li>命令前面加上<code>!</code>号表示取消该命令</li><li>在具有sudo操作的用户下, 执行<code>sudo -l</code>可以查看到该用户被允许和被禁止运行的命令</li><li>默认情况下输入一次sudo可以保持<strong>15</strong>分钟不再要求输入密码，如果想要延长这个时间，可以修改配置文件</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># visudo</span></span><br><span class="line">......</span><br><span class="line">Defaults env_reset,pwfeedback,timestamp_timeout=60<span class="comment"># 这个是改成60分钟才会需要再次输入密码，并且输入密码的时候会显示*号</span></span><br></pre></td></tr></tbody></table></figure><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>进程：是程序运行的过程，是启动可执行程序的实例，动态，有生命周期及运行状态</p><p>进程的组成：</p><ul><li>已分配内存的地址空间</li><li>安全属性，包括所有权凭据和特权</li><li>进程代码的一个或多个执行线程</li><li>进程状态</li></ul><h3 id="进程类型"><a href="#进程类型" class="headerlink" title="进程类型"></a>进程类型</h3><p>守护进程：特殊的孤儿进程，在系统引导过程中启动的进程，跟终端无关的进程</p><p>前台进程：跟终端相关，通过终端启动的进程</p><p><img src="https://www.z4a.net/images/2021/08/31/-2021-08-31-130431.png" alt="-2021-08-31-130431.png"></p><p>父进程复制自己的地址空间，通过fork函数A创建一个新的(子)进程结构。每个新进程分配一个唯一的进程ID(PID)，满足跟踪安全性之需。PID和父进程ID(PPID)是子进程环境的元素，任何进程都可以创建子进程，所有进程都是第一个系统进程的后代</p><h3 id="进程的生命周期"><a href="#进程的生命周期" class="headerlink" title="进程的生命周期"></a>进程的生命周期</h3><p><img src="https://www.z4a.net/images/2021/08/31/-2021-08-31-133117.png" alt="-2021-08-31-133117.png"></p><p>进程是一个动态的实体，从创建到消亡，是一个进程的整个生命周期。进程可能<br>会经历各种不同的状态，一般来说有三种状态</p><ul><li>就绪态： 进程已经获得了除cpu以外的所有其它资源，在就绪队列中等待cpu调度</li><li>执行态： 已经获得cpu以及所有需要的资源正在运行</li><li>阻塞态(等待状态)： 进程因等待所需要的资源而放弃处理器，或者进程本来就不拥有处理器，且其它资源也没有满足</li></ul><p>状态转换： 就绪态的进程得到cpu调度就会变为执行状态，执行态的进程如果因为休眠或等待某种资源就会变为等待状态，执行态的进程如果时间片到了就会重新变为就绪状态放入就绪队列末尾，等待状态的进程如果得到除cpu以外的资源就会变为就绪状态</p><p>PS：处于等待状态的进程不能直接转变为执行状态，而首先要变为就绪状态，哪怕系统中只有一个进程</p><h3 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h3><p>“systemd即为system daemon“,是linux下的一种init软件。Systemd是一个系统管理守护进程、工具和库的集合，用于取代System V init进程固有的缺点，提高了系统的启动速度。Systemd的功能是用于集中管理和配置类UNIX系统</p><ul><li>/usr/lib/systemd/system/ ：软件包安装的单元</li><li>/etc/systemd/system/ ：系统管理员安装的单元</li></ul><p>iptables是制定规则下发指令</p><h2 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h2><p><strong>三种服务模式</strong></p><ul><li>IaaS(Infrastructure as a Service)：基础设施服务。只提供最底层的虚拟和硬件</li><li>PaaS(Platform as a Service):平台服务。提供硬件及操作系统和运行环境</li><li>SaaS(Software as a Service):软件服务。提供一套完整的产品，无需考虑后期的维护和管理基础设施，例如百度网盘</li></ul><p><a href="https://www.z4a.net/image/gLPqXN" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/20/-2021-07-20-123613.png" alt="-2021-07-20-123613.png"></a></p><h4 id="服务器虚拟化"><a href="#服务器虚拟化" class="headerlink" title="服务器虚拟化"></a>服务器虚拟化</h4><p>虚拟化平台：VMware、Hyper-v、KVM、QEMU等</p><ul><li><p>一变多：利用虚拟化平台在物理主机上创建多台虚拟机，提高CPU的利用价值</p></li><li><p>多变一：将多台服务器虚拟成一台虚拟机，例如超级计算机，多个cpu运行在一个机器上</p></li></ul><h4 id="虚拟化架构"><a href="#虚拟化架构" class="headerlink" title="虚拟化架构"></a>虚拟化架构</h4><p><strong>寄居架构</strong></p><p>在物理主机的设备基础上安装运行虚拟化程序，依赖物理主机的操作系统及各种资源，物理主机出问题虚拟化便不能执行（参考VMware在windows上的虚拟机创建和使用）</p><p><a href="https://www.z4a.net/image/gLXhTj" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/20/-2021-07-20-130133.png" alt="-2021-07-20-130133.png"></a></p><p><strong>裸金属架构</strong></p><p>直接在硬件上安装虚拟化软件，不依赖操作系统，虚拟机直接与内核进行交互</p><p><a href="https://www.z4a.net/image/gLXsna" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/20/-2021-07-20-130954.png" alt="-2021-07-20-130954.png"></a></p><h4 id="虚拟化的优缺点"><a href="#虚拟化的优缺点" class="headerlink" title="虚拟化的优缺点"></a>虚拟化的优缺点</h4><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>隔离分区</td><td>启动速度慢</td></tr><tr><td>易扩展</td><td>迁移过程慢</td></tr><tr><td>易上云</td><td>不能适应SOA架构</td></tr></tbody></table><h2 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h2><p><strong>docker三大核心部件</strong></p><table><thead><tr><th>镜像</th><th>类似于虚拟机里的镜像，一个只读的模板</th></tr></thead><tbody><tr><td>容器</td><td>运行在镜像里的服务</td></tr><tr><td>仓库</td><td>存放镜像版本，例如存放centos各个版本的仓库称为centos仓库，其实镜像本身就是一个仓库</td></tr></tbody></table><p><a href="https://www.z4a.net/image/gc63lw" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/21/QQ20210721204346.png" alt="QQ20210721204346.png"></a></p><p><strong>每一层都只能对所在的这一层的数据进行修改，离开后再运行则进入了新的一层，这就是为什么镜像会变的越来越臃肿，因此制作镜像的时候尽量用&amp;&amp;将运行命令放在同一层执行</strong></p><p><strong>将在前台运行的容器放到后台运行CTRL+P+Q</strong>，即不会打断当前UP容器的状态</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">php               apache    cebc80a7d3e6   2 weeks ago    417MB</span><br><span class="line">[root@localhost ~]<span class="comment"># docker tag php:apache apache:latest#SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">apache            latest    cebc80a7d3e6   2 weeks ago    417MB</span><br><span class="line">php               apache    cebc80a7d3e6   2 weeks ago    417MB<span class="comment">#只要有一个名字在镜像就在</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker rmi apache:latest</span></span><br><span class="line">Untagged: apache:latest</span><br><span class="line">[root@localhost ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">php               apache    cebc80a7d3e6   2 weeks ago    417MB</span><br></pre></td></tr></tbody></table></figure><h4 id="显示容器状态"><a href="#显示容器状态" class="headerlink" title="显示容器状态"></a>显示容器状态</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker ps</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -qa#显示所有退出容器的id</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -a#显示所有容器</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -l#-l显示最新创建容器的状态</span></span><br></pre></td></tr></tbody></table></figure><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -d centos ping -c 3 baidu.com#-d是放到后台运行</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker ps -l#-l显示最新创建容器的状态</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                 CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">4295001297b8   centos    <span class="string">"ping -c 3 baidu.com"</span>   46 seconds ago   Exited (0) 43 seconds ago             modest_hopper</span><br><span class="line">[root@localhost ~]<span class="comment"># docker logs 4295</span></span><br><span class="line">PING baidu.com (39.156.69.79) 56(84) bytes of data.</span><br><span class="line">64 bytes from 39.156.69.79 (39.156.69.79): icmp_seq=1 ttl=127 time=26.3 ms</span><br><span class="line">64 bytes from 39.156.69.79 (39.156.69.79): icmp_seq=2 ttl=127 time=25.2 ms</span><br><span class="line">64 bytes from 39.156.69.79 (39.156.69.79): icmp_seq=3 ttl=127 time=25.6 ms</span><br><span class="line">--- baidu.com ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 7ms</span><br><span class="line">rtt min/avg/max/mdev = 25.245/25.697/26.293/0.476 ms</span><br></pre></td></tr></tbody></table></figure><h4 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -d -p 8880:80 php:apache#-d是放到后台运行  -p是指定端口（-P不需要双方端口，会映射到随机的主机端口），其中8880:80分别是主机端口：容器端口</span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker port CONTAINER ID</span></span><br><span class="line">80/tcp -&gt; 0.0.0.0:8880</span><br><span class="line">80/tcp -&gt; :::8880</span><br></pre></td></tr></tbody></table></figure><h4 id="映射读取文件的地址"><a href="#映射读取文件的地址" class="headerlink" title="映射读取文件的地址"></a>映射读取文件的地址</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -d -p 8880:80 -v /root/html:/var/www/html php:apache#</span></span><br><span class="line">/root/html:/var/www/html主机文件地址：容器文件地址，-v是创建数据卷，将容器的/var/www/html映射到root/html(即将/root/html挂载到/var/www/html)</span><br></pre></td></tr></tbody></table></figure><p><strong>可以使用watch -n 1 ‘docker ps -a’,即一秒钟执行一次后面的命令，用于观察容器的运行状况</strong></p><p><strong>容器的stop、start、kill，stop后start容器还是会跑回stop前的状态，kill则是强行掐掉容器</strong></p><h4 id="回到容器"><a href="#回到容器" class="headerlink" title="回到容器"></a>回到容器</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker attach CONTAINER ID </span></span><br><span class="line">[root@localhost ~]<span class="comment"># docker exec -it CONTAINER ID bash#不会打断前台运行进入容器，即从后门进去的，exit后不会停止容器</span></span><br></pre></td></tr></tbody></table></figure><h4 id="run-命令"><a href="#run-命令" class="headerlink" title="run 命令"></a>run 命令</h4><p>-i 保持输入的打开</p><p>-t开启一个虚拟终</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run -it centos bash</span></span><br><span class="line">[root@10ed18abd191 /]<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure><h4 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker save -o file.tar php:apache#-o为output，.tar为导出文件的格式，php:apache即REPOSITORY:TAG也可以用镜像id</span></span><br></pre></td></tr></tbody></table></figure><h4 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker load -i file.tar#-i为input</span></span><br><span class="line">Loaded image: php:apache<span class="comment">#镜像的导出和导入都是完整的</span></span><br></pre></td></tr></tbody></table></figure><h4 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker export -o file.tar CONTAINER ID #-o指的是output</span></span><br></pre></td></tr></tbody></table></figure><h4 id="导入容器"><a href="#导入容器" class="headerlink" title="导入容器"></a>导入容器</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker import file.tar hhh:v1#hhh:v1分别是REPOSITORY:TAG  #无法保留镜像所有层的历史，导入时将会以镜像的形式开启容器</span></span><br></pre></td></tr></tbody></table></figure><h4 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h4><p>rm删容器，rmi删镜像，-f是强制删除，用<strong>rmi -f</strong>可以彻底删除干净。–rm则是让容器运行完之后自动删除，即docker ps -qa 也看不到</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker rmi -f php:apache</span></span><br><span class="line">Untagged: php:apache</span><br><span class="line">Deleted: sha256:cebc80a7d3e66b07701b44f255ce0fd51aa69725677fb93481ebb5790cf0458a<span class="comment">#不仅untagges，还deleted</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker rm `docker ps -qa`#删除所有运行完的容器，-q是显示容器id，正在运行的容器没有-f是删除不了的</span></span><br></pre></td></tr></tbody></table></figure><h2 id="用docker安装kodbox"><a href="#用docker安装kodbox" class="headerlink" title="用docker安装kodbox"></a>用docker安装kodbox</h2><h2 id="利用Dockerfile制作镜像"><a href="#利用Dockerfile制作镜像" class="headerlink" title="利用Dockerfile制作镜像"></a>利用Dockerfile制作镜像</h2><p><strong>Dockerfile主体内容有：基础镜像信息、维护者信息、镜像操作指令及容器启动时的执行指令</strong></p><p>REPOSITORY只能是TAG的名字，TAG可以随便起</p><p>将软件和运行环境打包在一个文件夹里，不能跳出自己所在的文件夹，利用的是真实的主机资源</p><p>镜像文件提供运行环境，只读，容器运行时就是在镜像上层创建一个可写层，容器修改的任何设置都只是修改本层的，不会影响底层镜像</p><p><a href="https://www.z4a.net/image/gLIfnp" target="_blank" rel="noopener"><img src="https://www.z4a.net/images/2021/07/20/QQ20210720110449.png" alt="QQ20210720110449.png"></a></p><p>容器中run=create+start</p>]]></content>
      
      
      
        <tags>
            
            <tag> 云计算笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows</title>
      <link href="/2020/08/22/windows/"/>
      <url>/2020/08/22/windows/</url>
      
        <content type="html"><![CDATA[<hr><p>title:Windows<br>date:2020-08-22 21:58:25<br>tags:windows笔记</p><hr><h1 id="windows笔记"><a href="#windows笔记" class="headerlink" title="windows笔记"></a>windows笔记</h1><h3 id="操作系统介绍"><a href="#操作系统介绍" class="headerlink" title="操作系统介绍"></a>操作系统介绍</h3><ul><li><p>操作系统是管理计算机硬件资源和软件资源的计算机程序</p></li><li><p>硬件系统由运算器、控制器、存储器、输入设备、输出设备五大部分组成</p></li></ul><h3 id="Windows系统的特点"><a href="#Windows系统的特点" class="headerlink" title="Windows系统的特点"></a>Windows系统的特点</h3><ul><li>直观的图形化界面，易学易用</li><li>用户界面统一</li><li>丰富的设备无关的图形操作</li><li><em><strong>多任务，多用户</strong></em></li><li>丰富的第三方平台应用</li><li>应用领域十分广泛</li></ul><h3 id="VMware的三种网卡模式"><a href="#VMware的三种网卡模式" class="headerlink" title="VMware的三种网卡模式"></a>VMware的三种网卡模式</h3><ul><li><strong>桥接模式（Bridged）</strong>：将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致</li><li><strong>NAT地址转换模式</strong>  ：主机网卡直接与虚拟NAT设备相连，然后虚拟NAT设备与虚拟DHCP服务器一起连接在虚拟交换机VMnet8上，这样就实现了虚拟机联网</li><li><strong>仅主机模式（Host-Only）</strong>：Host-Only模式其实就是NAT模式去除了虚拟NAT设备，然后使用VMware Network Adapter VMnet1虚拟网卡连接VMnet1虚拟交换机来与虚拟机通信的，Host-Only模式将虚拟机与外网隔开，使得虚拟机成为一个独立的系统，只与主机相互通讯</li></ul><h3 id="Windows-server"><a href="#Windows-server" class="headerlink" title="Windows server"></a>Windows server</h3><p><strong>初始化配置：</strong></p><ul><li>将IP配置成静态（因为DHCP可能会导致地址变动）</li><li>关闭IEsec安全组件（方便使用IE）</li><li>开启文件隐藏和显示文件后缀名</li><li>修改主机名（便于后面区分）</li><li>关闭防火墙</li></ul><p><strong>远程桌面：</strong></p><ul><li>关闭防火墙或者是防火墙放行远程桌面服务</li><li>客户端远程连接（win+R⇢mstsc）</li></ul><h3 id="防火墙分类"><a href="#防火墙分类" class="headerlink" title="防火墙分类"></a>防火墙分类</h3><p>逻辑上：</p><blockquote><ul><li>主机防火墙：为单个主机进行防护</li><li>网络防火墙：对网络入口进行防护</li></ul></blockquote><p>物理上：</p><blockquote><ul><li>硬件防火墙：硬件级别实现部分防火墙功能，另一部分功能基于软件实现。性能高，成本也高</li><li>软件防火墙：应用软件处理逻辑运行于通用硬件平台上的防火墙。性能低，成本低</li></ul></blockquote><p>通过修改允许应用通过的列表可以针对具体应用或程序做放行</p><h3 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h3><p>存储系统和应用程序的设置信息、参数等的数据库</p><p><strong>注册表的修改（win+R⇢regedit），例如修改默认浏览器HKEY_CLASSES_ROOT⇢http⇢shell⇢open⇢command⇢default</strong></p><p><strong>设置IE起始网页HKEY_CURRENT_USER⇢Software⇢Microsoft⇢Internet Explore⇢Main⇢Default_Page_URL</strong> </p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><p>对用户添加到隶属组实现权限授予</p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20200822170114421.png" alt="image-20200822170114421"></p><h3 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h3><ul><li>添加磁盘：虚拟机关机时可加入，有需要的话物理机也可外扩磁盘</li><li>压缩卷：对空间大的磁盘进行压缩，实现分区</li><li>新建简单卷：在磁盘压缩后可操作</li></ul><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20200822171431142.png" alt="image-20200822171431142"></p><ul><li>扩展卷：将未分配的磁盘扩展到相应的磁盘上</li><li>磁盘启动号（即A、B、C、D盘…）</li></ul><p> <em>win10磁盘管理在此电脑⇢管理⇢磁盘管理</em></p><h3 id="活动目录"><a href="#活动目录" class="headerlink" title="活动目录"></a>活动目录</h3><p>Active Directory活动目录是Windows server2003域环境中提供目录服务的组件。目录服务在微软平台上从2000开始引入，可以理解为活动目录是目录服务在微软平台上的一种实现方式，在非微软平台上也有相应的实现</p><p> <strong>活动目录的作用</strong>：</p><blockquote><p>1.能集中管理所有windows账户，管理员工的账户登录密码,管理他们权限,限制他们所能用的软件，另外维护起来也减少网管的负担</p><p>2.能和exchang邮件服务器/客户端系统联动，如果网管部门勤快的话,可以把所有雇员每个人的基本信息输里头，每个员工都能方便查任何一个公司雇员的电话、邮件，想通过商务方式联系谁特方便。这在公司上规模以后特有用，保证公司无纸化办公，书面的，基本什么都走邮件</p><p>3.服务器整合,统一。你公司的office网络,你的共享文件服务器，公司内部wiki，内部实时通信。还有别的好多服务，你只要在服务器一安装,自动和活动目录整合,你不论去哪,只要微软的生产力服务器软件的服务，一次活动目录账户验证，到处通行</p></blockquote><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><ul><li><p>命名空间是一个界定号的区域，比如把一个电话簿看成一个命名空间，那么可以通过电话簿寻找到某个人名，进而找到这个人的电话号码等信息。Windows server提供的活动目录就是一个命名空间，我们通过活动目录里的对象名称可以找到与对象相关信息</p></li><li><p>活动目录的域名采用DNS的格式来命名，我们可以把域名命名为一个命名空间，比如baidu.com</p></li><li><p>活动目录的逻辑结构包括了：域（domain）、域树（domain tree）、域（domain forest）和组织单元</p></li><li><p>一个命名空间有一个域组成，多个域组成域树，多个域树组成域林</p></li></ul><p> <strong>域</strong></p><ul><li><p>域是一种逻辑分组，准确的说一种环境，域是最小的安全边界。域环境能给网络中资源集中统一的管理，如果想要实现域环境需要首先安装活动目录服务（AD）</p></li><li><p>命名空间具有连续性，子域的后缀名包含着父域的域名</p><p>![](C:\Users\asus\Pictures\Saved Pictures\u=2932372014,3581161866&amp;fm=26&amp;gp=0.jpg)</p></li></ul><p> <strong>域树</strong></p><ul><li>每棵域树的第一个域被称为根域</li><li>域树内的所有域共享一个活动目录，活动目录内的数据分散地存储各个域中，每一个域只存储该域内的数据，比如用户账户、计算机账户等</li><li>将存储在各个域内的对象总的称为活动目录</li></ul><p> <strong>域林</strong></p><ul><li>由一棵域树或者多棵域树组成</li><li>每棵域树具有独享的命名空间，每棵域树的命名空间具有连续性的</li><li>不同的域树之间的命名空间不具有连续性</li><li>林中的第一棵域树的根域被称为林的域根，也是林的名称</li></ul><p><strong>组织单元</strong><br><code>是一种容器，用来存储对象（包含用户账户、计算机账户等），也可以包含其他的组织单元</code></p><p>![](C:\Users\asus\Pictures\Saved Pictures\QQ图片20200822174001.jpg)</p><h3 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h3><p> <strong>1.DHCP动态主机配置协议</strong></p><p><code>是一个局域网中的网络协议，主要工作域两个用途：用于内部网络或者网络服务供应商自动分配ip地址，给用户用于内部网络管理员作为对所有计算机的中央管理的手段</code><br><code>使用UDP协议，其中服务使用UDP的67号端口来监听和接收客户请求消息,保留UDP的68号端口用于接收来自DHCP服务器的消息回复（客户端监听67端口，服务端监听68端口）</code></p><p><strong>2.DHCP的四个工作过程</strong></p><ul><li>客户机请求 IP（DHCPdiscover） </li><li>服务器响应（DHCPoffer） </li><li>客户机选择 IP（DHCPrequest） </li><li>服务器确认 IP租约（DHCPack/DHCPnak）</li></ul><p> <code>1.DHCP客户端在局域网中发一个discover包，使用广播的方式用于发现DHCP服务器</code><br><code>2.DHCP服务端接受到discover包，回应客户端offer包，用于告诉“我”可以提供IP地址（如果局域网中存在多个服务端，优先使用率先到达的offer包）</code><br><code>3.DHCP客户端接受到offer包之后，向服务端发送了request包，请求使用IP地址服务端发送ACK包，确认信息</code> </p><p><code>4.服务器确定租约，并向客户端发送ACK包</code></p><p> <strong>3.DHCP相关概念</strong></p><ul><li>DHCP客户端：获取网络配置参数的终端</li><li>DHCP服务端：提供网络配置参数的终端（提供的信息有，IP地址，网关，dns等）</li><li>DHCP中继：服务端和客户端之间转发dhcp的设备（主机或者是路由器）</li><li>作用域：一个网络所有可以分配IP地址的连续范围，主要用来定义物理子网的单一IP地址范围</li><li>超级作用域：一组作用域的集合，实现一个物理子网中多个逻辑IP地址</li><li>排除范围：排除作用域内有限的IP地址序列</li><li>地址池：定义作用域+排除范文之后，剩余的地址形成可用地址池</li><li>保留：dhcp服务器提供永久地址租约，确保客户端始终使用相同的IP地址</li><li>租用：客户从服务器上获得并临时占用某个IP地址的过程</li><li>租约：获得IP地址的使用时间，当租约到期或者被删除时或停止租约</li></ul><p> <strong>DHCP租约更新</strong></p><ul><li><p>自动更新<br>当租约&gt;=50%，自动尝试更新<br>    当租约&gt;=87.5%，发出广播再次更新租约<br>    当租约&gt;=1005%，客户机停止使用当前IP地址，只能重新进行DHCP的租约过程</p></li><li><p>手动更新<br>windows：ipconfig /renew和/release（释放IP）<br>    Linux：dhclient -r</p></li></ul><p><strong>DHCP优点</strong></p><ul><li>减少管理员的工作量</li><li>节约IP地址，提高IP地址的利用效率</li><li>避免IP冲突</li><li>移动计算机后不需要重新配置网络信息，能够方便更改错误的可能性</li></ul><p><strong>DHCP实验</strong></p><p>将Windows server虚拟机克隆，一台用作服务器，一台用作客户机。</p><p>将VMware软件自身的DHCP关闭，否则一个局域网中会有多台服务端，会影响到实验现象的观察<br><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20200824135523928.png" alt="image-20200824135523928"></p><p>注意在克隆后的计算机上进行：win+r  输入sysprep</p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\image-20200824135755121.png" alt="image-20200824135755121"></p><ul><li>第一步，在服务器端安装dhcp角色，点击添加角色和功能，安装dhcp</li><li>第二步，新建作用域（包括了指定DHCP所有的相关参数）</li><li>第三步，给服务端配置静态IP地址</li><li>第四步，客户端将IP地址获得的方式改为dhcp</li><li>第五步，客户端win+r  输入ipconfig /release，释放之前的地址信息</li><li>第六步，客户端win+r  输入ipconfig /renew，重新获得IP地址</li></ul><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p> <strong>DNS域名解析服务</strong><br>域名系统dns是一种分布式网络目录服务，主要作用是将<em><strong>域名与IP地址之间的互相转换</strong></em>（目的是为了解决IP地址不方便记忆）<br>    DNS是基于C/S<code>（客户机和服务器）</code>架构的 </p><p> <strong>DNS系统组成</strong></p><ul><li>域名空间：标识一组主机并提供他们的有关信息的树结构的说明</li><li>域名服务器：保持和维护域名空间中的数据</li><li>stub解析器：解析器是简单的程序或子程序数据库，它从服务器中提取信息来应对域名空间中主机查询</li></ul><p> <strong>DNS服务器类型</strong></p><ul><li>权威性服务器<ul><li>主域名服务器</li><li>辅域名服务器（作为主域名服务器的备份）</li><li>残根域名服务器</li><li>秘密域名服务器</li></ul></li><li>非权威性服务器<ul><li>惟高速缓存服务器</li><li>转发服务器</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络基础知识</title>
      <link href="/2020/04/03/wang-luo-ji-chu-zhi-shi/"/>
      <url>/2020/04/03/wang-luo-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<hr><p>title:网络基础知识<br>date:2020-04-03 21:17:04<br>tags:数据链路基础</p><hr><h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><p><strong>定义</strong>：</p><p>路由表是一个存储在路由器或者联网计算机中的电子表格（文件）或类数据库，为经过路由器的每个数据帧寻找一条最佳传输路径。可以由系统管理员设置，可以由路由协议动态修改。</p><p>注意：数据到达路由器时，路由器会检查数据链路帧目标地址字段中的数据链路标识，如果包含接口标识符或广播标识符，则传递给网络层。如果是路由器接口或IP地址或广播地，进一步检查数据包中的协议字段，传给内部进程。</p><p>​     若数据链路标识不是路由器，则需要经过路由选择。</p><h3 id="数据通信类型"><a href="#数据通信类型" class="headerlink" title="数据通信类型"></a>数据通信类型</h3><h5 id="1-单播"><a href="#1-单播" class="headerlink" title="1.单播"></a>1.单播</h5><p>一对一</p><h5 id="2-组播"><a href="#2-组播" class="headerlink" title="2.组播"></a>2.组播</h5><p>对所在组的所有成员发布</p><h5 id="3-广播"><a href="#3-广播" class="headerlink" title="3.广播"></a>3.广播</h5><p>对广播域内所有设备发布</p><p>主要为mac地址 ffff.ffff.ffff</p><p>IP的主机为全为1</p><p>IP地址子网掩码为32位</p><h3 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h3><p>重点：</p><p>![](C:\Users\asus\Pictures\Screenshots\批注 2020-03-31 000753.png)</p><h5 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1.应用层"></a>1.应用层</h5><p>提供用户UI接入以及各种应用程序协议</p><p>eg.http:80/tcp</p><p>​     https:443 /tcp/udp</p><p>​     dns:53/tcp/udp</p><p>​     ftp:20、21/tcp</p><p>​     dhcp：67、68</p><p>​     ssh：22/tcp</p><p>​     telnet：23/tcp</p><h5 id="2-表示层"><a href="#2-表示层" class="headerlink" title="2.表示层"></a>2.表示层</h5><p>对数据进行优化处理：数据格式化，数据加密解密，数据压缩解压缩</p><h5 id="3-会话层"><a href="#3-会话层" class="headerlink" title="3.会话层"></a>3.会话层</h5><p>建立、管理、终止实体之间的会话连接</p><h5 id="4-传输层（段）"><a href="#4-传输层（段）" class="headerlink" title="4.传输层（段）"></a>4.传输层（段）</h5><p>数据的分段和重组，提供数据传输的方式</p><p>eg：TCP</p><p>​              1.面向连接、流控和可靠性</p><p>​              2.对数据进行分段的可靠重组（顺序是用一个序列号来保证的）</p><p>​        UDP：用于对数据的准确性要求没太高要求，及对延迟低要求比较高的场景     如：QQ、网游</p><p>​              1.无连接传输</p><p>​              2.整个包发送</p><p>​    <em><strong>对延迟低有高要求优选</strong></em> </p><h5 id="5-网络层（包）"><a href="#5-网络层（包）" class="headerlink" title="5.网络层（包）"></a>5.网络层（包）</h5><p>1.给数据提供远距离传输的机制</p><p>2.提供逻辑地址（ip地址）</p><p>3.路由选择（ip地址可以让路由器识别数据所属的局域网，进行准确的转发)</p><h5 id="6-数据链路层（帧）"><a href="#6-数据链路层（帧）" class="headerlink" title="6.数据链路层（帧）"></a>6.数据链路层（帧）</h5><p>1.将分组数据封装成帧</p><p>2.实现两个相邻结点之间的通信</p><p>3.提供物理地址（mac地址）</p><p>![](C:\Users\asus\Pictures\Screenshots\批注 2020-03-31 165640.png)</p><h5 id="7-物理层"><a href="#7-物理层" class="headerlink" title="7.物理层"></a>7.物理层</h5><p>提供机械的和电气的规约</p><p>电：RJ45、RJ11、BNC</p><p>光：LC、SC、SFP</p><p> 无线：wifi6</p><h3 id="DoD模型（美国国防部模型）"><a href="#DoD模型（美国国防部模型）" class="headerlink" title="DoD模型（美国国防部模型）"></a>DoD模型（美国国防部模型）</h3><p>![](C:\Users\asus\Pictures\Screenshots\批注 2020-03-31 170026.png)</p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>![](C:\Users\asus\Pictures\Screenshots\批注 2020-03-31 171547.png)</p><h6 id="序列号和确认号"><a href="#序列号和确认号" class="headerlink" title="序列号和确认号"></a>序列号和确认号</h6><p>TCP会话的每一端都包含一个32位（bit）的序列号，该序列号被用来跟踪该端发送的数据量。<em>每一个包中都包含序列号，在接收端则通过确认号用来通知发送端数据成功接收</em></p><h5 id="1-三次握手（三次握手会导致半开TCP的攻击行为dos-）"><a href="#1-三次握手（三次握手会导致半开TCP的攻击行为dos-）" class="headerlink" title="1.三次握手（三次握手会导致半开TCP的攻击行为dos ）"></a>1.三次握手（三次握手会导致半开TCP的攻击行为dos ）</h5><img src="https://www.z4a.net/images/2021/07/15/srchttp___pic3.zhimg.com_v2-e0d749b68780b060b094d3c163f9fb5b_b.jpgreferhttp___pic3.zhimg.jpg" alt="srchttp___pic3.zhimg.com_v2-e0d749b68780b060b094d3c163f9fb5b_b.jpgreferhttp___pic3.zhimg.jpg" border="0"><p>1）客户端向服务器发送连接请求包SYN，在该数据包中，序列号<code>seq=j</code>，ack=0（<em>seq是序列号，这是为了连接以后传送数据用的，<code>初始序列号是客户端随机产生的一个值</code>；ack是对收到的数据包的确认，值是等待接收的数据包的序列号</em>）</p><p>2） 服务器收到连接请求包SYN后，将客户端的请求包SYN放到自己的末连接队列中，此时服务器需要发送两个包给客户端：</p><p>​         （1）向客户端发送确认自己收到其连接请求的确认包ACK（*此时初始序列号是由服务器随机产生的一个值<code>seq=k</code>，确认号是客户端初始序列号+1，即<code>ack=j+1</code>*）</p><p>​          （2）向客户端发送连接询问请求包SYN，询问客户端是否已经准备好建立连接，进行数据通信</p><p>3）客户端收到服务器的ACK和SYN后，知道服务器已经同意建立连接：</p><p>​            向服务器发送连接建立的确认包ACK（*该数据包中，序列号是上一个请求数据包中的确认号值<code>seq=j+1</code>,确认号是服务器的初始序列号+1，即<code>ack=k+1</code>*）</p><h5 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手"></a>为什么要三次握手</h5><p>  是为消除旧有连接请求的SYN消息对新连接的干扰，同步连接双方的序列号和确认号并交换TCP窗口大小消息</p><blockquote><p>设想：如果只有两次握手，那么第二次握手后服务器只向客户端发送ACK包，此时客户端与服务器端建立连接。在这种握手规则下： </p><p>假设：如果发送网络阻塞，由于TCP/IP协议定时重传机制，B向A发送了两次SYN请求，分别是x1和x2，且因为阻塞原因，导致x1连接请求和x2连接请求的TCP窗口大小和数据报文长度不一致，如果最终x1达到A，x2丢失，此时A同B建立了x1的连接，这个时候，因为AB已经连接，B无法知道是请求x1还是请求x2同B连接，如果B默认是最近的请求x2同A建立了连接，此时B开始向A发送数据，数据报文长度为x2定义的长度，窗口大小为x2定义的大小，而A建立的连接是x1，其数据包长度大小为x1，TCP窗口大小为x1定义，这就会导致A处理数据时出错。</p><p>很显然，如果A接收到B的请求后，A向B发送SYN请求y3（y3的窗口大小和数据报长度等信息为x1所定义），确认了连接建立的窗口大小和数据报长度为x1所定义，A再次确认回答建立x1连接，然后开始相互传送数据，那么就不会导致数据处理出错了</p></blockquote><h5 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h5><p>TCP使用四次挥手关闭一个连接：</p><p>第一次挥手：主动关闭方发送一个FIN并进入FIN_WAIT1状态</p><p> 第二次挥手：被动关闭方接收到主动关闭方发送的FIN并发送ACK，此时被动关闭方进入CLOSE_WAIT状态；主动关闭方收到被动关闭方的ACK后，进入FIN_WAIT2状态</p><p> 第三次挥手：被动关闭方发送一个FIN并进入LAST_ACK状态</p><p> 第四次挥手：主动关闭方收到被动关闭方发送的FIN并发送ACK，此时主动关闭方进入TIME_WAIT状态，经过2MSL时间后关闭连接；被动关闭方收到主动关闭方的ACK后，关闭连接</p><p><img src="https://images0.cnblogs.com/blog2015/629726/201504/202015027462149.png" alt="img"></p><p><img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\1585817867537.png" alt="1585817867537"></p><h3 id="ARP-地址解析协议"><a href="#ARP-地址解析协议" class="headerlink" title="ARP(地址解析协议)"></a>ARP(地址解析协议)</h3><blockquote><p>定义：地址解析协议，即ARP（Address Resolution Protocol），是根据<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80" target="_blank" rel="noopener">IP地址</a>获取<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80/2129" target="_blank" rel="noopener">物理地址</a>（mac地址）的一个<a href="https://baike.baidu.com/item/TCP%2FIP%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">TCP/IP协议</a>。<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA/455151" target="_blank" rel="noopener">主机</a>发送信息时将包含目标IP地址的ARP请求广播到局域网络上的所有主机，并接收返回消息，以此确定目标的物理地址；<strong>收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间</strong>，<strong>下次请求时直接查询ARP缓存以节约资源（Cisco路由器上，arp表中的路由条目有300反正的寿命）</strong>。地址解析协议是建立在网络中各个主机互相信任的基础上的，局域网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；由此攻击者就可以向某一主机发送伪ARP应答报文，使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个<a href="https://baike.baidu.com/item/ARP%E6%AC%BA%E9%AA%97" target="_blank" rel="noopener">ARP欺骗</a>。<a href="https://baike.baidu.com/item/ARP%E5%91%BD%E4%BB%A4" target="_blank" rel="noopener">ARP命令</a>可用于查询本机ARP缓存中IP地址和<a href="https://baike.baidu.com/item/MAC%E5%9C%B0%E5%9D%80" target="_blank" rel="noopener">MAC地址</a>的对应关系、添加或删除静态对应关系等。相关协议有<a href="https://baike.baidu.com/item/RARP" target="_blank" rel="noopener">RARP</a>、<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%90%86ARP" target="_blank" rel="noopener">代理ARP</a>。<a href="https://baike.baidu.com/item/NDP" target="_blank" rel="noopener">NDP</a>用于在<a href="https://baike.baidu.com/item/IPv6" target="_blank" rel="noopener">IPv6</a>中代替地址解析协议。</p></blockquote><h5 id="代理ARP"><a href="#代理ARP" class="headerlink" title="代理ARP"></a>代理ARP</h5><p>路由器善意的谎言 </p><ol><li><p>当路由器收到一个ARP请求，请求的目的地址不是自己的IP，但是自己可以去往这个地方 </p></li><li><p>路由器会给请求方一个回复，回复的内容中会标注你要去往的IP地址的MAC就是我的MAC地址</p></li><li><p>然后请求方就把数据发送过来 注意！代理ARP并不是所有品牌的路由器都是默认开启的。并且需要路由器查询路由表，发现可以去往 请求目的地址的时候，才会触发。<br>  例：下图中R1去 ping 192.168.23.3 的时候，R2就会替 192.168.23.3 做出arp回应</p></li></ol><p>  <img src="C:\Users\asus\AppData\Roaming\Typora\typora-user-images\1585893242967.png" alt="1585893242967"></p><h3 id="路由汇总"><a href="#路由汇总" class="headerlink" title="路由汇总"></a>路由汇总</h3><p>定义：将一组路由汇总为一个单个的路由广播。路由的查询需要占用设备资源，路由汇总可以减少路由表的规模。</p><p>RIP/EIGRP等距离矢量协议支持自动及手工路由汇总，而OSPF（链路状态）只支持手工路由汇总（一种在ABR，一种在ASBR）</p><p>相关命令：1.ip route 172.16.0.0 255.255.255.0 192.168.12.1 (相当于添加静态路由)</p><p>​                  2.ip summary-address rip 172.16.0.0 255.255.255.0</p><h5 id="计算方法："><a href="#计算方法：" class="headerlink" title="计算方法："></a>计算方法：</h5><p>计算汇总路由的步骤如下：<br>　　第一步：将地址转换为二进制格式，并将它们对齐<br>　　第二步：找到所有地址中都相同的最后一位，在它后面划一条竖线。<br>　　第三步：计算有多少位是相同的，汇总路由为第1个IP地址加上斜线。<br>172.16.1.0/24         = 172. 16. 00000 001.00000000<br>172.16.2.0/24         = 172. 16. 00000 010.00000000<br>172.16.3.0/24         = 172. 16. 00000 011.00000000<br>172.16.4.0/24         = 172. 16. 00000 100.00000000<br>172.16.5.0/24         = 172. 16. 00000 101.00000000</p><p>IP地址172.16.1.0—172.16.5.0的前21位相同，因此最佳的汇总路由为172.16.0.0/21</p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>ip地址前期分为ABC三类：A：1.0.0.0~126.255.255.255    前8位为网络号</p><p>​                                             B：128.0.0.0~191.255.255.255      前16位为网络号</p><p>​                                             C：192.0.0.0~233.255.255.255       前24位为网络号</p><p><em>后期人们保留ABC类的称呼，但是不再以此作为网络位数的判断，因为出现了子网掩码</em> </p><h3 id="私有IP地址"><a href="#私有IP地址" class="headerlink" title="私有IP地址"></a>私有IP地址</h3><p>A:10.0.0.0~10.255.255.255  /8</p><p>B:172.16.0.0~172.31.255.255  /12</p><p>C:192.168.0.0 ~192.168.255.255  /16</p><p><strong>所有IP地址都需要使用NAT（地址转换）来实现访问公网的功能</strong></p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><p>子网掩码是一个32位地址，是与IP地址结合使用的一种技术。</p><p>它的主要作用有两个：</p><p>1、一是用于屏蔽IP地址的一部分以区别网络标识和主机标识，并说明该IP地址是在局域网上，还是在远程网上。</p><p>2、二是用于将一个大的IP网络划分为若干小的子网络。</p><p>使用子网是为了减少IP的浪费。因为随着互联网的发展，越来越多的网络产生，有的网络多则几百台，有的只有区区几台，这样就浪费了很多IP地址，所以要划分子网。使用子网可以提高网络应用的效率。</p><h3 id="广播地址与网络编号"><a href="#广播地址与网络编号" class="headerlink" title="广播地址与网络编号"></a>广播地址与网络编号</h3><p>为了方便对局域网的管理，由于需要发广播，或者对整个局域网进行统一称呼，出现了<strong>广播地址和网络编号</strong><br>一个IP地址的主机位全为1，那么这个地址就是广播地址。(这边说的是三层的广播地址，全是ﬀﬀ的那个 是二层广播)。<br>一个IP地址的主机位全为0，那么这个地址就是网络编号，被用来对整个局域网统一称呼。</p><p>广播地址和网络编号都是保留的，不能分配给主机使用。</p><blockquote><p>请问下列哪个IP地址可以被主机使用： </p><p>A:172.16.1.128/30   广播</p><p>/30即网络号是172.16.1  主机号是128 换成二进制100000 <strong>00</strong></p><p>B:172.16.1.129/30</p><p>主机号是129二进制是100000 <strong>01</strong>为可用地址</p><p>C:172.16.1.130/30 </p><p>D:172.16.1.131/30   网络编号</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
